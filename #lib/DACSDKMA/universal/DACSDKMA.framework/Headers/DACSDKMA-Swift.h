// Generated by Apple Swift version 3.1 (swiftlang-802.0.48 clang-802.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import AVFoundation;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSNotificationCenter;
@class DACSDKMAAdsManager;

SWIFT_CLASS("_TtC8DACSDKMA8DACSDKMA")
@interface DACSDKMA : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DACSDKMA * _Nonnull shared;)
+ (DACSDKMA * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) NSNotificationCenter * _Nonnull notificationCenter;
/// NSURLRequestを生成する。
+ (NSURLRequest * _Nonnull)createURLRequestWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// NSURLクラスを生成する
+ (NSURL * _Nullable)createURLWithUri:(NSString * _Nullable)uri SWIFT_WARN_UNUSED_RESULT;
/// AdsManagerを使用する際に呼ぶ。
/// 現在はAdsManager.load()から呼ばれる。
- (void)addAdsManager:(DACSDKMAAdsManager * _Nonnull)adsManager;
/// AdsManagerが使用されなくなったら呼ぶ。
/// 現在はAdsManager.clean()から呼ばれる。
- (void)removeAdsManager:(DACSDKMAAdsManager * _Nonnull)adsManager;
@end


/// VMAP/AdBreak用プロトコル。
/// DACSDKMAAdsRequestを生成する際に引数に代入することで、AdBreakが通知されるようになります。
SWIFT_PROTOCOL("_TtP8DACSDKMA23DACSDKMAContentPlayhead_")
@protocol DACSDKMAContentPlayhead
/// 再生時間(秒)。(*readonly)
@property (nonatomic, readonly) NSTimeInterval currentTime;
/// 再生可能時間(秒)。(*readonly)
@property (nonatomic, readonly) NSTimeInterval duration;
@end

@class AVPlayer;

/// DACSDKMAContentPlayheadをAVPlayer用に実装したクラスです。
/// AVPlayerをコンテンツとして使用します。
SWIFT_CLASS("_TtC8DACSDKMA31DACSDKMAAVPlayerContentPlayhead")
@interface DACSDKMAAVPlayerContentPlayhead : NSObject <DACSDKMAContentPlayhead>
/// コンテンツ・プレイヤー。
@property (nonatomic, weak) AVPlayer * _Nullable player;
/// 再生時間(秒)。(*readonly)
@property (nonatomic, readonly) NSTimeInterval currentTime;
/// 再生可能時間(秒)。(*readonly)
@property (nonatomic, readonly) NSTimeInterval duration;
/// 初期化。
/// \param player コンテンツを表示するAVPlayerクラス。
///
- (nonnull instancetype)initWithPlayer:(AVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DACSDKMAAVPlayerItemDelegate;
@class AVAsset;

SWIFT_CLASS("_TtC8DACSDKMA20DACSDKMAAVPlayerItem")
@interface DACSDKMAAVPlayerItem : AVPlayerItem
@property (nonatomic, readonly, weak) id <DACSDKMAAVPlayerItemDelegate> _Nullable delegate;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/// 動画終了時に実行される。
- (void)playerItemDidPlayToEndTimeNotifiedWithNotification:(NSNotification * _Nonnull)notification;
/// 動画エラー時時に実行される。
- (void)playerItemFailedNotifiedWithNotification:(NSNotification * _Nonnull)notification;
/// 動画読み込み時にバッファが不足したり、ネットワークの帯域が不足している場合に発生する。
- (void)playerItemPlaybackStalledNotifiedWithNotification:(NSNotification * _Nonnull)notification;
- (nonnull instancetype)initWithAsset:(AVAsset * _Nonnull)asset automaticallyLoadedAssetKeys:(NSArray<NSString *> * _Nullable)automaticallyLoadedAssetKeys SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP8DACSDKMA28DACSDKMAAVPlayerItemDelegate_")
@protocol DACSDKMAAVPlayerItemDelegate
- (void)dacsdkmaAVPlayerItemWithItem:(DACSDKMAAVPlayerItem * _Nonnull)item didChange:(NSString * _Nonnull)key userInfo:(id _Nullable)userInfo;
@end

@protocol DACSDKMAAVQueuePlayerDelegate;

SWIFT_CLASS("_TtC8DACSDKMA21DACSDKMAAVQueuePlayer")
@interface DACSDKMAAVQueuePlayer : AVQueuePlayer <DACSDKMAAVPlayerItemDelegate>
@property (nonatomic, weak) id <DACSDKMAAVQueuePlayerDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithItems:(NSArray<AVPlayerItem *> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)dacsdkmaAVPlayerItemWithItem:(DACSDKMAAVPlayerItem * _Nonnull)item didChange:(NSString * _Nonnull)key userInfo:(id _Nullable)userInfo;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP8DACSDKMA29DACSDKMAAVQueuePlayerDelegate_")
@protocol DACSDKMAAVQueuePlayerDelegate
- (void)dacsdkmaAVQueuePlayerWithPlayer:(DACSDKMAAVQueuePlayer * _Nonnull)player didChange:(NSString * _Nonnull)key userInfo:(id _Nullable)userInfo;
@end

@class UIView;
@class DACSDKMACompanionSlot;

/// 広告枠の情報を保持するクラスです。
SWIFT_CLASS("_TtC8DACSDKMA19DACSDKMAAdContainer")
@interface DACSDKMAAdContainer : NSObject
/// ユーザー広告枠ビュー。(*readonly)
@property (nonatomic, weak) UIView * _Nullable view;
/// 画像広告枠の配列。(*readonly)
@property (nonatomic, readonly, copy) NSArray<DACSDKMACompanionSlot *> * _Nullable companionSlots;
/// 初期化。
/// \param view このビューに動画広告ビューがaddSubviewされます。デフォルトでは、このビューのサイズと同じサイズで表示されます。
///
/// \param companionSlots この配列内の画像広告枠に画像広告がビューとして代入されます。画像広告が不要な場合は、nilを代入します。
///
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view companionSlots:(NSArray<DACSDKMACompanionSlot *> * _Nullable)companionSlots OBJC_DESIGNATED_INITIALIZER;
@end

enum DACSDKMAAdErrorType : NSInteger;
enum DACSDKMAAdErrorCode : NSInteger;

/// 広告読込中や動画再生中に発生したエラー情報を保持するクラスです。
SWIFT_CLASS("_TtC8DACSDKMA15DACSDKMAAdError")
@interface DACSDKMAAdError : NSObject
/// エラー属性。(*readonly)
@property (nonatomic, readonly) enum DACSDKMAAdErrorType type;
/// エラー・コード。(*readonly)
@property (nonatomic, readonly) enum DACSDKMAAdErrorCode code;
/// エラー・メッセージ。(*readonly)
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@end

/// エラー・コードを表す列挙型です。
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdErrorCode) {
/// その他・原因不明のエラーです。
  DACSDKMAAdErrorCodeUnknownError = 900,
/// XML解析に失敗しました。
  DACSDKMAAdErrorCodeVastXmlParsingError = 100,
/// VASTが不正です。
  DACSDKMAAdErrorCodeVastInvalidSchema = 101,
/// VASTリクエストが時間内に返りませんでした。
  DACSDKMAAdErrorCodeVastWrapperLoadTimeout = 301,
/// Wrapperのリダイレクト回数が上限に達しました。
  DACSDKMAAdErrorCodeVastTooManyRedirects = 302,
/// Wrapper内のURLにリクエストしましたが、広告がありませんでした。
  DACSDKMAAdErrorCodeVastNoAds = 303,
/// 動画プレーヤーがリニア広告を表示できませんでした。
  DACSDKMAAdErrorCodeVideoPlayerError = 400,
/// メディアファイルURLにリクエストしましたが、ファイルが存在しませんでした。
  DACSDKMAAdErrorCodeVastMediaFileNotFound = 401,
/// メディアファイルURLにリクエストしましたが、時間内にレスポンスが返ってきませんでした。
  DACSDKMAAdErrorCodeVastMediaLoadTimeout = 402,
/// SDKでサポートしているメディアファイルがありませんでした。
  DACSDKMAAdErrorCodeVastLinearAssetMismatch = 403,
/// サポートしているノンリニアリソースを見つけられませんでした。
  DACSDKMAAdErrorCodeVastNonlinearAdResourceNotFound = 503,
/// 画像広告の取得に失敗しました。
  DACSDKMAAdErrorCodeVastCompanionAdLoadingFailed = 603,
/// サポートしている画像広告のリソースがありませんでした。
  DACSDKMAAdErrorCodeVastCompanionAdResourceNotFound = 604,
/// VMAP schema error
  DACSDKMAAdErrorCodeVmapInvalidSchema = 1000,
/// VMAP version of response not supported
  DACSDKMAAdErrorCodeVmapVastVersionNotSupported = 1001,
/// VMAP parsing error
  DACSDKMAAdErrorCodeVmapXmlParsingError = 1002,
/// AdBlock type not supported
  DACSDKMAAdErrorCodeVmapAdBlockTypeNotSupported = 1003,
/// General ad response dosument error
  DACSDKMAAdErrorCodeVmapAdError = 1004,
/// Ad response template type not supported
  DACSDKMAAdErrorCodeVmapAdTypeNotSupported = 1005,
/// Ad response document extraction or parsing error
  DACSDKMAAdErrorCodeVmapAdParsingError = 1006,
/// Ad response document retrieval timeout
  DACSDKMAAdErrorCodeVmapAdLoadTimeout = 1007,
/// Ad response document retrieval error(e.g., HTTP server responded with error code)
  DACSDKMAAdErrorCodeVmapAdLoadError = 1008,
/// ネットワークが切断されています。
  DACSDKMAAdErrorCodeNetworkNotReachable = 100000,
/// 無効なパラメータです。
  DACSDKMAAdErrorCodeInvalidParameter = 100001,
/// データリクエストに失敗しました。
  DACSDKMAAdErrorCodeDataRequestFailed = 100002,
/// 再生可能な動画広告が一つも存在しませんでした。
  DACSDKMAAdErrorCodeNoMediaFileURL = 100003,
/// iOSのバージョンが古いためSDKを利用できません。
  DACSDKMAAdErrorCodeUnsupportedIOSVersion = 100004,
/// 動画広告枠が存在しません。
  DACSDKMAAdErrorCodeNoAdContainerView = 100005,
};

/// 広告データ読み込み中、および再生中に発生したエラー属性を表す列挙型です。
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdErrorType) {
/// VASTやクリエイティブのロードに関するエラーです。
  DACSDKMAAdErrorTypeLoadingFailed = 0,
/// 広告再生に関するエラーです。
  DACSDKMAAdErrorTypePlayingFailed = 1,
/// その他・原因不明のエラーです。
  DACSDKMAAdErrorTypeUnknown = 2,
};

enum DACSDKMAAdEventType : NSInteger;

/// 広告再生に関するイベント情報を保持するクラスです。
SWIFT_CLASS("_TtC8DACSDKMA15DACSDKMAAdEvent")
@interface DACSDKMAAdEvent : NSObject
/// イベント属性。(*readonly)
@property (nonatomic, readonly) enum DACSDKMAAdEventType type;
/// イベント情報。(*readonly)
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable adData;
/// イベント名。(*readonly)
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PlayableStatusKey;)
+ (NSString * _Nonnull)PlayableStatusKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ProgressKey;)
+ (NSString * _Nonnull)ProgressKey SWIFT_WARN_UNUSED_RESULT;
@end

/// 広告再生に関するイベント属性を表す列挙型です。
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdEventType) {
/// AdBreakが開始しました。
  DACSDKMAAdEventTypeDidAdBreakStart = 0,
/// AdBreakが終了しました。
  DACSDKMAAdEventTypeDidAdBreakEnd = 1,
/// 広告データの読み込みが完了しました。
  DACSDKMAAdEventTypeDidLoad = 2,
/// 動画広告が再生開始しました。
  DACSDKMAAdEventTypeDidStart = 3,
/// 動画広告が”1/4”再生されました。
  DACSDKMAAdEventTypeDidFirstQuartile = 4,
/// 動画広告が”1/2”再生されました。
  DACSDKMAAdEventTypeDidMidpoint = 5,
/// 動画広告が”3/4”再生されました。
  DACSDKMAAdEventTypeDidThirdQuartile = 6,
/// 動画広告が再生完了しました。
  DACSDKMAAdEventTypeDidComplete = 7,
/// VMAPも含めて、すべての動画広告が再生完了しました。
  DACSDKMAAdEventTypeDidAllAdsComplete = 8,
/// 動画広告が再開しました。再生開始時は通知されません。
  DACSDKMAAdEventTypeDidResume = 9,
/// 動画広告が一時停止しました。
  DACSDKMAAdEventTypeDidPause = 10,
/// 動画広告が停止しました。
  DACSDKMAAdEventTypeDidStop = 11,
/// 動画広告が巻き戻された。
  DACSDKMAAdEventTypeDidRewind = 12,
/// 動画広告がスキップします。
  DACSDKMAAdEventTypeWillSkip = 13,
/// 動画広告がスキップしました。
  DACSDKMAAdEventTypeDidSkip = 14,
/// 動画広告がクリックされました。
  DACSDKMAAdEventTypeDidClick = 15,
/// 広告枠が最大化します。
  DACSDKMAAdEventTypeWillEnterFullscreen = 16,
/// 広告枠が最大化しました。
  DACSDKMAAdEventTypeDidEnterFullscreen = 17,
/// 最大化した広告枠が元のサイズに戻ります。
  DACSDKMAAdEventTypeWillExitFullscreen = 18,
/// 最大化した広告枠が元のサイズに戻りました。
  DACSDKMAAdEventTypeDidExitFullscreen = 19,
/// 広告枠が閉じられました。
  DACSDKMAAdEventTypeDidClose = 20,
/// 動画広告の静音状態が解除されました。
  DACSDKMAAdEventTypeDidUnMute = 21,
/// 動画広告が静音状態になりました。
  DACSDKMAAdEventTypeDidMute = 22,
/// コンパニオンが表示されました。
  DACSDKMAAdEventTypeDidCompanionCreativeView = 23,
/// コンパニオンがクリックされました。
  DACSDKMAAdEventTypeDidCompanionClick = 24,
/// 動画広告の表示可能状態が変化しました。
  DACSDKMAAdEventTypeDidChangePlayableStatus = 25,
/// 動画広告がシークされます。
  DACSDKMAAdEventTypeWillSeek = 26,
/// 動画広告がシークされました。
  DACSDKMAAdEventTypeDidSeek = 27,
/// 指定されたProgressイベントまで到達しました。
  DACSDKMAAdEventTypeDidProgress = 28,
};

enum DACSDKMAInViewStates : NSInteger;

/// 動画広告の再生可能状態に関する情報を保持するクラスです。
SWIFT_CLASS("_TtC8DACSDKMA29DACSDKMAAdVideoPlayableStates")
@interface DACSDKMAAdVideoPlayableStates : NSObject <NSCopying>
/// インビュー状態。(*readonly)
@property (nonatomic) enum DACSDKMAInViewStates inViewStatus;
/// 起動中のアプリ内に存在するか否か。(*readonly)
@property (nonatomic) BOOL isOnScreen;
/// 他の広告ビューがフルスクリーンで表示されているか、否か。(*readonly)
@property (nonatomic) BOOL isOtherViewInFullscreen;
/// 画面内に存在しているか否か。(*readonly)
@property (nonatomic) BOOL hasWindow;
@property (nonatomic) BOOL isHidden;
@property (nonatomic) BOOL isAlpha;
@property (nonatomic) BOOL hasSuperView;
/// 再生可能か否かを判定します。
///
/// returns:
/// 再生可能な場合はtrue、不可能な場合はfalseを返します。
- (BOOL)isPlayable SWIFT_WARN_UNUSED_RESULT;
/// Returns a Boolean value that indicates whether the receiver is equal to another given object.
/// \param object The object with which to compare the receiver.
///
///
/// returns:
/// true if the receiver is equal to object, otherwise false. In effect returns false if receiver is nil.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Required. Returns a new instance that’s a copy of the receiver.
/// \param zone This parameter is ignored. Memory zones are no longer used by Objective-C.
///
///
/// returns:
/// New instance that’s a copy of the receiver.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

/// 動画広告の再生状態を表す列挙型です。
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdVideoPlaybackStates) {
/// 再生中
  DACSDKMAAdVideoPlaybackStatesPlaying = 0,
/// 一時停止中
  DACSDKMAAdVideoPlaybackStatesPausing = 1,
/// 停止中
  DACSDKMAAdVideoPlaybackStatesStopped = 2,
/// 不明
  DACSDKMAAdVideoPlaybackStatesUnknown = 3,
};

@class DACSDKMAVideoData;
@class DACSDKMAVideoPlayerView;
enum DACSDKMAAdViewMode : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC8DACSDKMA14DACSDKMAAdView")
@interface DACSDKMAAdView : UIView
/// 動画データ
@property (nonatomic, readonly, strong) DACSDKMAVideoData * _Nonnull videoData;
/// 動画広告プレイヤー
@property (nonatomic, strong) DACSDKMAVideoPlayerView * _Nullable playerView;
/// 表示状態
@property (nonatomic) enum DACSDKMAAdViewMode mode;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame videoData:(DACSDKMAVideoData * _Nonnull)videoData OBJC_DESIGNATED_INITIALIZER;
/// 準備処理
- (void)setupWithSucceeded:(void (^ _Nonnull)(void))succeeded failed:(void (^ _Nonnull)(void))failed;
/// 終了処理
- (void)clean;
/// 広告表示状態を変更する
/// \param adViewMode adViewMode
///
/// \param areAnimationsEnabled アニメーションを行う場合はtrue, 行わない場合はfalse。
///
/// \param completion 完了時に実行するclosure。現在と同一のadViewModeを引数にした場合でも実行する。
///
- (void)changeAdViewMode:(enum DACSDKMAAdViewMode)adViewMode areAnimationsEnabled:(BOOL)areAnimationsEnabled :(void (^ _Nullable)(void))completion;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// 動画広告の表示状態を表す列挙型です。
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdViewMode) {
/// 最小化
  DACSDKMAAdViewModeMinimized = 0,
/// 通常
  DACSDKMAAdViewModeNormal = 1,
/// インタースティシャル
  DACSDKMAAdViewModeInterstitial = 2,
/// 最大化
  DACSDKMAAdViewModeMaximized = 3,
};


/// 広告データの読み込に成功した際、通知されるクラスです。
SWIFT_CLASS("_TtC8DACSDKMA21DACSDKMAAdsLoadedData")
@interface DACSDKMAAdsLoadedData : NSObject
/// 広告マネージャー。(*readonly)
@property (nonatomic, readonly, strong) DACSDKMAAdsManager * _Nonnull adsManager;
@end

@protocol DACSDKMAAdsLoaderDelegate;
@class DACSDKMASettings;
@class DACSDKMAAdsRequest;

/// 広告データを読み込む為のクラスです。
SWIFT_CLASS("_TtC8DACSDKMA17DACSDKMAAdsLoader")
@interface DACSDKMAAdsLoader : NSObject
/// デリゲート。
@property (nonatomic, weak) id <DACSDKMAAdsLoaderDelegate> _Nullable delegate;
/// 設定。(*readonly)
@property (nonatomic, readonly, strong) DACSDKMASettings * _Nonnull settings;
/// 広告データ。(*readonly)
@property (nonatomic, strong) DACSDKMAVideoData * _Nullable videoData;
/// 初期化。
/// \param settings 広告データの読み込み設定クラス。(内部でコピーして使用する為、初期化後に変更しても反映されません。)
///
- (nonnull instancetype)initWithSettings:(DACSDKMASettings * _Nonnull)settings OBJC_DESIGNATED_INITIALIZER;
/// 広告をリクエストします。
/// \param adsRequest 広告データをリクエストする為のクラス。
///
- (void)requestAds:(DACSDKMAAdsRequest * _Nonnull)adsRequest;
@end


/// DACSDKMAAdsLoaderのデリゲートです。
SWIFT_PROTOCOL("_TtP8DACSDKMA25DACSDKMAAdsLoaderDelegate_")
@protocol DACSDKMAAdsLoaderDelegate
/// 広告データの読み込みに成功しました。
/// \param loader 通知元のDACSDKMAAdsLoaderクラス。
///
/// \param adsLoadedData 成功時のDACSDKMAAdsLoadedDataクラス。
///
- (void)dacsdkmaAdsLoader:(DACSDKMAAdsLoader * _Nonnull)loader didLoad:(DACSDKMAAdsLoadedData * _Nonnull)adsLoadedData;
/// 広告データの読み込みに失敗しました。
/// \param loader 通知元のDACSDKMAAdsLoaderクラス。
///
/// \param adError 失敗時のDACSDKMAAdErrorクラス。
///
- (void)dacsdkmaAdsLoader:(DACSDKMAAdsLoader * _Nonnull)loader didFail:(DACSDKMAAdError * _Nonnull)adError;
@end

@protocol DACSDKMAAdsManagerDelegate;

/// 広告データを操作する為のクラスです。
SWIFT_CLASS("_TtC8DACSDKMA18DACSDKMAAdsManager")
@interface DACSDKMAAdsManager : NSObject
/// デリゲート。
@property (nonatomic, weak) id <DACSDKMAAdsManagerDelegate> _Nullable delegate;
/// 広告データ読み込み時の設定のコピーを返します。(*readonly)
@property (nonatomic, readonly, strong) DACSDKMASettings * _Nonnull settings;
/// 広告枠。(*readonly)
@property (nonatomic, readonly, strong) DACSDKMAAdContainer * _Nonnull adContainer;
/// 動画広告の再生可能時間(秒)。(*readonly)
@property (nonatomic, readonly) double durationTime;
/// AdBreak内の最後の広告か否か。(*readonly)
@property (nonatomic, readonly) BOOL isLastAd;
/// 動画広告がスキップ可能か否か。
@property (nonatomic, readonly) BOOL isSkippable;
/// SDK広告枠ビュー。adContainer.viewにaddSubviewされています。(*readonly)
@property (nonatomic, readonly, strong) UIView * _Nullable adSpotView;
/// 動画広告が実際に表示されるビュー。adSpotViewにaddSubviewされています。(*readonly)
@property (nonatomic, readonly, strong) UIView * _Nullable adVideoView;
/// 動画広告メディアの解像度。(*readonly)
@property (nonatomic) CGSize videoSize;
/// 動画広告の静音状態。(*readonly)
@property (nonatomic) BOOL isMute;
/// フルスクリーン状態。(*readonly)
@property (nonatomic) BOOL isFullscreen;
/// 動画広告表の示部分のサイズ。(*readonly)
@property (nonatomic) CGRect videoRect;
/// 動画広告の再生時間(秒)。(*readonly)
@property (nonatomic) double progressTime;
/// 動画広告の再生位置(0.0〜1.0)。(*readonly)
@property (nonatomic) double progress;
/// 動画広告のスキップ可能になるまでの残り時間(秒)。Double.NaNの場合はskip不可能。(*readonly)
@property (nonatomic) double skipRemainingTime;
/// 動画広告の表示状態。(*readonly)
@property (nonatomic, strong) DACSDKMAAdVideoPlayableStates * _Nonnull playableStatus;
/// 動画広告の再生状態。(*readonly)
@property (nonatomic) enum DACSDKMAAdVideoPlaybackStates playbackStatus;
/// 動画広告の表示状態。(*readonly)
@property (nonatomic) enum DACSDKMAAdViewMode adViewMode;
/// 最後に発生した広告イベント。(*readonly)
@property (nonatomic, strong) DACSDKMAAdEvent * _Nonnull adEvent;
/// 表示される/表示された動画広告の総数。(*readonly)
@property (nonatomic) NSInteger totalAdsCount;
/// 現在表示中の広告も含めた動画広告の残数。(*readonly)
@property (nonatomic) NSInteger remainingAdsCount;
/// 現在表示中、もしくは次に表示される動画広告配列のインデックス。(*readonly)
@property (nonatomic) NSInteger currentAdIndex;
/// 広告データ
@property (nonatomic, readonly, strong) DACSDKMAVideoData * _Nonnull videoData;
/// 初期化
- (nonnull instancetype)initWithVideoData:(DACSDKMAVideoData * _Nonnull)videoData OBJC_DESIGNATED_INITIALIZER;
/// 広告データを読み込みます。
/// ロードが成功した場合、広告枠に動画広告ビューがaddSubviewされます。
/// ロード中、ロード済みの場合、何もせずにcompletionを実行します。
/// \param completion 完了時に実行されるクロージャー。成功した場合はtrue、失敗した場合はfalseが引数としてresultに渡されます。ロード中、またはロード済みの場合、resultはtrueになります。
///
- (void)loadWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// 終了処理。動画広告の再生を終了し、閉じた後に使用したインスタンスなどを解放します。
/// このメソッドの実行により動画が閉じられた場合、コンテンツの再開は通知されません。
- (void)clean;
/// 動画広告を再開します。
- (void)play;
/// 動画広告を一時停止します。
- (void)pause;
/// 動画広告を停止します。
- (void)stop;
/// 動画広告をリプレイします。
- (void)replay;
/// 動画広告をスキップします。
- (void)skip;
/// 動画広告をクリックします。
- (void)clickVideo;
/// 広告の表示状態を変更します。
/// \param adViewMode 変更後の広告表示状態。
///
/// \param areAnimationsEnabled アニメーションの有無。アニメーションを行う場合はtrue、行わない場合はfalse。デフォルトではtrueです。
///
/// \param completion 広告の表示状態が完了した際に実行されるクロージャー。成功した場合はtrue、失敗した場合はfalseが引数としてresultに渡されます。このメソッドの前後において、表示状態に変化が無い場合はtrueになります。
///
- (void)changeAdViewMode:(enum DACSDKMAAdViewMode)adViewMode areAnimationsEnabled:(BOOL)areAnimationsEnabled completion:(void (^ _Nullable)(BOOL))completion;
/// 動画の静音状態を変更します。
/// \param isEnable trueの場合は静音、falseの場合は元に戻します。
///
- (void)mute:(BOOL)isEnable;
/// 動画広告の再生を終了し、閉じます。アプリ、またはユーザーが閉じるボタンなどをクリックするなどの処理を行った際に呼び出します。
/// \param completion このメソッドが完了した際に実行されるクロージャー。
///
- (void)closeWithCompletion:(void (^ _Nullable)(void))completion;
/// AdBreakが再生中の場合、それを停止し、広告枠を閉じ、デリゲートにコンテンツの再開を通知をします。
/// AdBreakが再生前に呼び出した場合、動画広告の再生はキャンセルされます。コンテンツの再開は通知されません。
- (void)discardAdBreak;
/// アプリがアクティブになった。メソッド名変更時に注意。
- (void)applicationDidBecomeActiveNotifiedWithNotification:(NSNotification * _Nonnull)notification;
/// アプリがアクティブでなくなる。メソッド名変更時に注意。
- (void)applicationWillResignActiveNotifiedWithNotification:(NSNotification * _Nonnull)notification;
@end


/// DACSDKMAAdsManagerのデリゲートです。
SWIFT_PROTOCOL("_TtP8DACSDKMA26DACSDKMAAdsManagerDelegate_")
@protocol DACSDKMAAdsManagerDelegate
/// イベントを受け取った際に呼ばれます。
/// \param adsManager 通知元のDACSDKMAAdsManagerクラス。
///
/// \param adEvent 発生したDACSDKMAAdEventクラス。
///
- (void)dacsdkmaAdsManager:(DACSDKMAAdsManager * _Nonnull)adsManager didReceiveAdEvent:(DACSDKMAAdEvent * _Nonnull)adEvent;
/// エラーを受け取った際に呼ばれます。
/// \param adsManager 通知元のDACSDKMAAdsManagerクラス。
///
/// \param adError 発生したDACSDKMAAdErrorクラス。
///
- (void)dacsdkmaAdsManager:(DACSDKMAAdsManager * _Nonnull)adsManager didReceiveAdError:(DACSDKMAAdError * _Nonnull)adError;
/// 動画広告が再生開始、レジュームした際に呼ばれます。アプリのビデオコンテンツに停止を要求します。
/// \param adsManager 通知元のDACSDKMAAdsManagerクラス。
///
- (void)dacsdkmaAdsManagerDidRequestContentPause:(DACSDKMAAdsManager * _Nonnull)adsManager;
/// 動画広告が一時停止、正常終了・エラー終了した際に呼ばれます。アプリのビデオコンテンツに再生を要求します。
/// \param adsManager 通知元のDACSDKMAAdsManagerクラス。
///
- (void)dacsdkmaAdsManagerDidRequestContentResume:(DACSDKMAAdsManager * _Nonnull)adsManager;
@end


/// 広告データをリクエストする為のクラスです。
SWIFT_CLASS("_TtC8DACSDKMA18DACSDKMAAdsRequest")
@interface DACSDKMAAdsRequest : NSObject
/// 広告タグURL文字列。(*readonly)。
@property (nonatomic, readonly, copy) NSString * _Nonnull adTagURI;
/// 広告枠クラス。(*readonly)。
@property (nonatomic, readonly, strong) DACSDKMAAdContainer * _Nonnull adContainer;
/// VMAP/AdBreak用コンテンツ情報 (readonly)
@property (nonatomic, readonly, strong) id <DACSDKMAContentPlayhead> _Nullable contentPlayhead;
/// 初期化。
/// \param adTagURI 広告タグURL文字列。
///
/// \param adContainer 広告枠クラス。
///
/// \param contentPlayhead DACSDKMAContentPlayheadを継承したクラス。VMAPでAdBreakを利用する際に使用します。不要な場合は、nilにします。デフォルトではnilです。
///
- (nonnull instancetype)initWithAdTagURI:(NSString * _Nonnull)adTagURI adContainer:(DACSDKMAAdContainer * _Nonnull)adContainer contentPlayhead:(id <DACSDKMAContentPlayhead> _Nullable)contentPlayhead OBJC_DESIGNATED_INITIALIZER;
@end

@class DACSDKMAVastCompanionEntity;
@class DACSDKMAVastTrackingEvent;
@class DACSDKMAVastAdNode;
@class UIWindow;
@class UITapGestureRecognizer;

SWIFT_CLASS("_TtC8DACSDKMA26DACSDKMACompanionContainer")
@interface DACSDKMACompanionContainer : UIView <UIGestureRecognizerDelegate>
@property (nonatomic, readonly, strong) DACSDKMAVastCompanionEntity * _Nonnull companion;
@property (nonatomic, readonly, strong) UIView * _Nonnull companionView;
/// コンパニオンのクリック時遷移先
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughURL;
/// トラッキングイベント。Wrapper含む。
@property (nonatomic, copy) NSArray<DACSDKMAVastTrackingEvent *> * _Nonnull trackingEvents;
@property (nonatomic, weak) DACSDKMAVideoData * _Nullable videoData;
@property (nonatomic, weak) DACSDKMAVastAdNode * _Nullable adNode;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCompanion:(DACSDKMAVastCompanionEntity * _Nonnull)companion companionView:(UIView * _Nonnull)companionView OBJC_DESIGNATED_INITIALIZER;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (void)didTapWithSender:(UITapGestureRecognizer * _Nonnull)sender;
- (void)setup;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// 画像広告枠クラス。
SWIFT_CLASS("_TtC8DACSDKMA21DACSDKMACompanionSlot")
@interface DACSDKMACompanionSlot : NSObject
/// 画像広告を追加するビュー。(*readonly)
@property (nonatomic, weak) UIView * _Nullable slot;
/// 追加する画像広告のサイズ。(*readonly)
@property (nonatomic, readonly) CGSize size;
/// 画像広告ビュー。slotにこのviewがaddSubviewされます。(*readonly)
@property (nonatomic, strong) UIView * _Nullable companion;
/// 画像広告の大きさ。(*readonly)
@property (nonatomic) CGSize companionSize;
- (void)clean;
@end


@class NSXMLParser;

/// The implementation of XMLParserDelegate and where the parsing actually happens.
SWIFT_CLASS("_TtC8DACSDKMA21DACSDKMAFullXMLParser")
@interface DACSDKMAFullXMLParser : NSObject <NSXMLParserDelegate>
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, DACSDKMAInViewConditions) {
  DACSDKMAInViewConditionsCenterContained = 0,
  DACSDKMAInViewConditionsRectWholeContained = 1,
  DACSDKMAInViewConditionsIntersected = 2,
};

/// 動画広告の視認状態
typedef SWIFT_ENUM(NSInteger, DACSDKMAInViewStates) {
/// 完全に親ビューの内部にあります。
  DACSDKMAInViewStatesIncluded = 0,
/// ビューと親ビューが一部交差しています。親ビューの内部にあります。
  DACSDKMAInViewStatesIntersectIn = 1,
/// ビューと親ビューが一部交差しています。親ビューの外部にあります。
  DACSDKMAInViewStatesIntersectOut = 2,
/// 完全に親ビューの外部にあります。
/// もしくは、hidden == true、alpha <= 0.0、superviewやwindowを所持していません。
  DACSDKMAInViewStatesExcluded = 3,
/// 不明な状態です。
  DACSDKMAInViewStatesUnknown = 4,
};


/// The implementation of XMLParserDelegate and where the lazy parsing actually happens.
SWIFT_CLASS("_TtC8DACSDKMA21DACSDKMALazyXMLParser")
@interface DACSDKMALazyXMLParser : NSObject <NSXMLParserDelegate>
@property (nonatomic, copy) NSData * _Nullable data;
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (BOOL)onMatch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIColor;

SWIFT_CLASS("_TtC8DACSDKMA28DACSDKMAOverlayWindowManager")
@interface DACSDKMAOverlayWindowManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DACSDKMAOverlayWindowManager * _Nonnull shared;)
+ (DACSDKMAOverlayWindowManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UIView * _Nullable overlayView;
- (UIView * _Nullable)showWithBackgroundColor:(UIColor * _Nonnull)backgroundColor windowLevel:(UIWindowLevel)windowLevel SWIFT_WARN_UNUSED_RESULT;
- (void)hide;
@end


/// 広告読み込み時の設定クラス
SWIFT_CLASS("_TtC8DACSDKMA16DACSDKMASettings")
@interface DACSDKMASettings : NSObject <NSCopying>
/// 動画広告の読み込みが完了次第、自動的に再生開始するか否か。
@property (nonatomic) BOOL isAutoStart;
/// 次のAdBreakに自動的に遷移するか否か。
@property (nonatomic) BOOL isAutoAdvanceToNextAdBreak;
/// 動画広告終了時に、広告枠を自動的に非表示にするか否か。
@property (nonatomic) BOOL isAutoAdHidden;
/// 動画広告が切り替わった際に、コンパニオン・ビューを自動的に削除するか否か。
@property (nonatomic) BOOL isAutoRemoveCompanion;
/// 動画広告起動時のmute設定。
@property (nonatomic) BOOL isMute;
/// ラッパー広告などをリダイレクトする際の最大回数。
@property (nonatomic) NSUInteger vastMaxRedirects;
/// VASTをリクエストした際のタイムアウト。
@property (nonatomic) NSTimeInterval vastResourceTimeOutSeconds;
/// VASTのリクエストを開始してから、すべてのVASTのロードが完了するまでのタイムアウト。
@property (nonatomic) NSTimeInterval vastAllResourceTimeOutSeconds;
/// 動画ファイルを読み込む際のタイムアウト時間。
@property (nonatomic) NSTimeInterval mediaLoadTimeOutSeconds;
/// 動画ファイルを読み込み際のエラーを許容する回数。
@property (nonatomic) NSUInteger adPlaybackStalledLimit;
/// 広告ビュー状態。
@property (nonatomic) enum DACSDKMAAdViewMode adViewMode;
/// 時間経過と共に送信されるトラッキングをリプレイ時に再度送信するか、しないか。
@property (nonatomic) BOOL isEnableSendProgressTrackingMoreThanOnce;
/// Required. Returns a new instance that’s a copy of the receiver.
/// \param zone This parameter is ignored. Memory zones are no longer used by Objective-C.
///
///
/// returns:
/// New instance that’s a copy of the receiver.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSessionConfiguration;
@class NSURLSession;
@class DACSDKMAURLConnectionError;

SWIFT_CLASS("_TtC8DACSDKMA21DACSDKMAURLConnection")
@interface DACSDKMAURLConnection : NSObject
@property (nonatomic, readonly, strong) NSURLSessionConfiguration * _Nonnull sessionConfiguration;
@property (nonatomic, strong) NSURLSession * _Nonnull session;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithTimeout:(NSTimeInterval)timeout OBJC_DESIGNATED_INITIALIZER;
/// 非同期でHTTPリクエストを行う。
- (void)requestAsynchWith:(NSURLRequest * _Nonnull)request success:(void (^ _Nonnull)(NSData * _Nonnull))success failure:(void (^ _Nonnull)(DACSDKMAURLConnectionError * _Nonnull))failure;
@end


SWIFT_CLASS("_TtC8DACSDKMA26DACSDKMAURLConnectionError")
@interface DACSDKMAURLConnectionError : NSError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary * _Nullable)dict SWIFT_UNAVAILABLE;
@end

@class DACSDKMAVastImpressionEntity;
@class DACSDKMAVastCompanionAdsCreativeEntity;
@class DACSDKMAVastInLineLinearCreativeEntity;

SWIFT_CLASS("_TtC8DACSDKMA24DACSDKMAVastAdBaseEntity")
@interface DACSDKMAVastAdBaseEntity : NSObject
/// ID. Required = NO
@property (nonatomic, copy) NSString * _Nullable adID;
/// Required = YES(3.0) | NO(4.0)
@property (nonatomic, copy) NSString * _Nullable adSystem;
/// Required = NO
@property (nonatomic, copy) NSString * _Nullable adSystemVersion;
/// エラー発生時のURI. Required = NO
@property (nonatomic, copy) NSString * _Nullable errorURI;
/// インプレッション
@property (nonatomic, copy) NSArray<DACSDKMAVastImpressionEntity *> * _Nonnull impressions;
/// Container for any number of Companion elements in any desired pixel dimensions.
/// Required = YES(InLine) | NO(Wrapper)
@property (nonatomic, strong) DACSDKMAVastCompanionAdsCreativeEntity * _Nullable companionAds;
/// 未実装. Required = NO
@property (nonatomic, copy) NSArray * _Nullable extensions;
@property (nonatomic, readonly, copy) NSURL * _Nullable errorURL;
/// Linear Element をもつ、InlineのCreativeを取得する。
@property (nonatomic, readonly, strong) DACSDKMAVastInLineLinearCreativeEntity * _Nullable inLineLinearCreative;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA26DACSDKMAVastAdInLineEntity")
@interface DACSDKMAVastAdInLineEntity : DACSDKMAVastAdBaseEntity
/// Required = YES
@property (nonatomic, copy) NSString * _Nullable adTitle;
/// Required = NO
@property (nonatomic, copy) NSString * _Nullable adDescription;
/// Required = NO
@property (nonatomic, copy) NSURL * _Nullable survey;
@property (nonatomic, copy) NSString * _Nullable advertiser;
@property (nonatomic, copy) NSString * _Nullable pricing;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA18DACSDKMAVastAdNode")
@interface DACSDKMAVastAdNode : NSObject
@property (nonatomic, readonly, strong) DACSDKMAVastAdBaseEntity * _Nullable ad;
@property (nonatomic, weak) DACSDKMAVastAdNode * _Nullable parent;
@property (nonatomic, copy) NSArray<DACSDKMAVastAdNode *> * _Nonnull children;
@property (nonatomic, copy) NSArray<DACSDKMAVastTrackingEvent *> * _Nonnull trackingEventsForLinear;
@property (nonatomic, readonly) BOOL isPod;
@property (nonatomic) double duration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAd:(DACSDKMAVastAdBaseEntity * _Nullable)ad parent:(DACSDKMAVastAdNode * _Nullable)parent OBJC_DESIGNATED_INITIALIZER;
/// trackingEventsを初期化する。送信済みのトラッキングも送信可能にする。
- (void)setupWithDuration:(double)duration offsetBegin:(double)offsetBegin offsetEnd:(double)offsetEnd;
- (NSArray<DACSDKMAVastTrackingEvent *> * _Nonnull)sendAdError:(DACSDKMAAdError * _Nonnull)adError SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8DACSDKMA27DACSDKMAVastAdWrapperEntity")
@interface DACSDKMAVastAdWrapperEntity : DACSDKMAVastAdBaseEntity
/// リダイレクト先のURI. Required = YES
@property (nonatomic, copy) NSString * _Nullable vastAdTagURI;
@property (nonatomic, readonly, copy) NSURL * _Nullable vastAdTagURL;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA30DACSDKMAVastCreativeBaseEntity")
@interface DACSDKMAVastCreativeBaseEntity : NSObject
@property (nonatomic, copy) NSString * _Nullable creativeID;
@property (nonatomic, copy) NSString * _Nullable adID;
@property (nonatomic, copy) NSString * _Nullable apiFramework;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA38DACSDKMAVastCompanionAdsCreativeEntity")
@interface DACSDKMAVastCompanionAdsCreativeEntity : DACSDKMAVastCreativeBaseEntity
@property (nonatomic, copy) NSArray<DACSDKMAVastCompanionEntity *> * _Nonnull companions;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DACSDKMAVastTrackingEventEntity;

SWIFT_CLASS("_TtC8DACSDKMA27DACSDKMAVastCompanionEntity")
@interface DACSDKMAVastCompanionEntity : NSObject
/// イベント時成果URL情報配列. Required = NO
@property (nonatomic, copy) NSArray<DACSDKMAVastTrackingEventEntity *> * _Nonnull trackingEvents;
/// AD画像クリックURL. Required = NO
@property (nonatomic, copy) NSString * _Nullable companionClickThroughURI;
/// Used to track clicks in the companion creative when the creative handles the clickthrough using an interactive API such as VPAID. May have an optional string attribute id. Required = NO
@property (nonatomic, copy) NSString * _Nullable companionClickTrackingURI;
/// companionClickTrackingのID. Required = NO
@property (nonatomic, copy) NSString * _Nullable companionClickTrackingId;
/// An optional identifier for the creative. Required = NO
@property (nonatomic, copy) NSString * _Nullable id;
/// The API necessary to communicate with the creative if available. Required = NO
@property (nonatomic, copy) NSString * _Nullable apiFramework;
/// AD画像URL. Required = *YES (staticResource, IFrameResource, HTMLResource のいずれか)
/// URI to a static file.(Describes non-html creative.)
@property (nonatomic, copy) NSString * _Nullable staticResourceURI;
/// MIME type. Required = *YES (staticResourceがあるとき。)
/// (“image/gif”, “image/jpeg”, “image/png”) : displayed using the HTML tag <img> and the resource URI as the ‘src’ attribute.
/// or (“Application/x-javascript”) : displayed using the HTML tag <script> and the resource URI as the ‘src’ attribute.
/// or (“application/x-shockwave-flash”) : displayed using a Flash player
@property (nonatomic, copy) NSString * _Nullable staticResourceCreativeType;
/// Iframe用HTMLのURL. Required = *YES (staticResource, IFrameResource, HTMLResource のいずれか)
/// Describes a resource that is an HTML page that can be displayed within an Iframe on the publisher’s page.
@property (nonatomic, copy) NSString * _Nullable iFrameResourceURI;
/// HTMLコード. Required = *YES (staticResource, IFrameResource, HTMLResource のいずれか)
/// Describes a “snippet” of HTML code to be inserted directly within the publisher’s HTML page code.
@property (nonatomic, copy) NSString * _Nullable htmlResource;
/// An image description that displays when a user mouses over the Companion creative. Required = NO
@property (nonatomic, copy) NSString * _Nullable altText;
/// Used to pass information to the creative unit; includes the attribute xmlEncoded that is a Boolean value for identifying whether the ‘AdParameters’ value is XML encoded. Required = NO
@property (nonatomic, copy) NSString * _Nullable adParameters;
/// Used to identify desired placement on a publisher’s page; values to be used should be discussed between publishers and advertisers. Required = NO
@property (nonatomic, copy) NSString * _Nullable adSlotID;
@property (nonatomic, readonly, copy) NSURL * _Nullable staticResourceURL;
@property (nonatomic, readonly, copy) NSURL * _Nullable iFrameResourceURL;
@property (nonatomic, readonly, copy) NSURL * _Nullable companionClickThroughURL;
@property (nonatomic, readonly, copy) NSURL * _Nullable companionClickTrackingURL;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)isMatch:(DACSDKMAVastCompanionEntity * _Nonnull)companionEntity SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC8DACSDKMA18DACSDKMAVastEntity")
@interface DACSDKMAVastEntity : NSObject
/// VASTのバージョン。“2.0” or “3.0”. Required = YES
@property (nonatomic, copy) NSString * _Nullable version;
/// Ad Element. Required = YES.
@property (nonatomic, copy) NSArray<DACSDKMAVastAdBaseEntity *> * _Nonnull ads;
/// エラー発生時の URL. Required = NO
@property (nonatomic, copy) NSString * _Nullable errorURI;
@property (nonatomic, readonly, copy) NSURL * _Nullable errorURL;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA28DACSDKMAVastImpressionEntity")
@interface DACSDKMAVastImpressionEntity : NSObject
/// インプレッション時に送信するURL. Required = YES. Content: 1+.
@property (nonatomic, copy) NSString * _Nullable uri;
/// インプレッションに関するID. Required = NO
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA33DACSDKMAVastInLineCompanionEntity")
@interface DACSDKMAVastInLineCompanionEntity : DACSDKMAVastCompanionEntity
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DACSDKMAVastMediaFileEntity;

SWIFT_CLASS("_TtC8DACSDKMA38DACSDKMAVastInLineLinearCreativeEntity")
@interface DACSDKMAVastInLineLinearCreativeEntity : DACSDKMAVastCreativeBaseEntity
/// ビデオクリック時の成果URL. Required = NO
@property (nonatomic, copy) NSString * _Nullable clickThroughURI;
/// ビデオクリック時のトラッキングURL. Required = NO
@property (nonatomic, copy) NSString * _Nullable clickTrackingURI;
/// イベント時成果URL情報配列. Required = NO
@property (nonatomic, copy) NSArray<DACSDKMAVastTrackingEventEntity *> * _Nonnull trackingEvents;
/// URIs to request on custom events such as hotspotted video. May have an optional attribute ‘id’. Required = NO.
@property (nonatomic, copy) NSURL * _Nullable customClickURLs;
/// ビデオ秒数. “HH:MM:SS”|“HH:MM:SS.mmm”。Required = YES
@property (nonatomic, copy) NSString * _Nullable duration;
/// メディアファイル情報の配列. Required = YES
@property (nonatomic, copy) NSArray<DACSDKMAVastMediaFileEntity *> * _Nonnull mediaFiles;
/// スキップ可能時間。“HH:MM:SS”|“HH:MM:SS.mmm”|“n%”。Only Inline。Required = NO
@property (nonatomic, copy) NSString * _Nullable skipoffset;
/// ビデオクリック時の遷移先URL. Required = NO
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughURL;
/// ビデオクリック時のトラッキングURL. Required = NO
@property (nonatomic, readonly, copy) NSURL * _Nullable clickTrackingURL;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
/// ネットワーク環境に最適なメディアオブジェクトを返します。
- (DACSDKMAVastMediaFileEntity * _Nullable)optimalMediaFileWithSize:(CGSize)size isReachableViaWiFi:(BOOL)isReachableViaWiFi SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA27DACSDKMAVastMediaFileEntity")
@interface DACSDKMAVastMediaFileEntity : NSObject
/// URI to the media file to be downloaded or streamed for the Linear creative. Linear creatives are typically video files, but static images may also be used.
/// Required = YES
@property (nonatomic, copy) NSString * _Nullable mediaURI;
/// Method of delivery of ad:
/// streaming - for streaming protocols;
/// progressive - for progressive download protocols (such as HTTP).
/// Required = Yes
@property (nonatomic, copy) NSString * _Nullable delivery;
/// MIME type for the file container. Popular MIME types include, but are not limited to “video/mp4” for MP4, and “video/x-flv” for Flash Video.
/// Required = Yes
@property (nonatomic, copy) NSString * _Nullable type;
/// Optional identifier of a media file
/// Required = NO
@property (nonatomic, copy) NSString * _Nullable id;
/// Identifies the API needed to execute an interactive media file.
/// Required = NO
@property (nonatomic, copy) NSString * _Nullable apiFramework;
/// The codec used to encode the file which can take values as specified by RFC 4281
/// Required = NO
@property (nonatomic, copy) NSString * _Nullable codec;
@property (nonatomic, readonly, copy) NSURL * _Nullable mediaURL;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DACSDKMAVideoAdRequestConfiguration;

SWIFT_CLASS("_TtC8DACSDKMA17DACSDKMAVastModel")
@interface DACSDKMAVastModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// VASTを指定したサーバーから読み込む
+ (void)loadWithVastAdTagURL:(NSURL * _Nonnull)url config:(DACSDKMAVideoAdRequestConfiguration * _Nonnull)config completionHandler:(void (^ _Nonnull)(DACSDKMAVastAdNode * _Nullable, DACSDKMAAdError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC8DACSDKMA25DACSDKMAVastTrackingEvent")
@interface DACSDKMAVastTrackingEvent : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
- (void)setupWithDuration:(double)duration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8DACSDKMA31DACSDKMAVastTrackingEventEntity")
@interface DACSDKMAVastTrackingEventEntity : NSObject
/// Required = YES
@property (nonatomic, copy) NSString * _Nullable event;
/// Required = YES
@property (nonatomic, copy) NSString * _Nullable trackingURI;
/// “HH:MM:SS” or “HH:MM:SS.mmm”, or percentage (“n%”). Required = NO
@property (nonatomic, copy) NSString * _Nullable offset;
@property (nonatomic, readonly, copy) NSURL * _Nullable trackingURL;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA34DACSDKMAVastWrapperCompanionEntity")
@interface DACSDKMAVastWrapperCompanionEntity : DACSDKMAVastCompanionEntity
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA39DACSDKMAVastWrapperLinearCreativeEntity")
@interface DACSDKMAVastWrapperLinearCreativeEntity : DACSDKMAVastCreativeBaseEntity
/// イベント時成果URL情報配列. Required = NO
@property (nonatomic, copy) NSArray<DACSDKMAVastTrackingEventEntity *> * _Nonnull trackingEvents;
/// ビデオクリック時のトラッキングURL. Required = NO
@property (nonatomic, copy) NSString * _Nullable clickTrackingURI;
@property (nonatomic, readonly, copy) NSURL * _Nullable clickTrackingURL;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DACSDKMAVmap;

SWIFT_CLASS("_TtC8DACSDKMA15DACSDKMAVideoAd")
@interface DACSDKMAVideoAd : NSObject
@property (nonatomic, strong) DACSDKMAVmap * _Nullable vmap;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA35DACSDKMAVideoAdRequestConfiguration")
@interface DACSDKMAVideoAdRequestConfiguration : NSObject
@property (nonatomic) double contentDuration;
@property (nonatomic) double resourceTimeOutSeconds;
@property (nonatomic) NSTimeInterval allResourceTimeOutSeconds;
@property (nonatomic) NSUInteger maxRedirects;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA17DACSDKMAVideoData")
@interface DACSDKMAVideoData : NSObject
/// AVPlayerにて再生可能なAVPlayerItemを生成する。
- (NSArray<DACSDKMAAVPlayerItem *> * _Nonnull)createPlayerItems SWIFT_WARN_UNUSED_RESULT;
/// 再生リストから、AVPlayerItemに関連付けられたAdItemを削除する。
- (void)removePlayerItem:(DACSDKMAAVPlayerItem * _Nullable)playerItem;
/// 現在表示中、もしくは次に表示される動画アセットを変更する。
/// currentItem.willSet()でこの処理を代用した場合、discardAdBreak()内で無限ループになるので、他のクラスからはこの関数を利用する。
- (void)replacePlayerItem:(DACSDKMAAVPlayerItem * _Nullable)playerItem;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AdDataVastTrackingEventsKey;)
+ (NSString * _Nonnull)AdDataVastTrackingEventsKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AdDataClickURL;)
+ (NSString * _Nonnull)AdDataClickURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull videoDataAdEventKey;)
+ (NSString * _Nonnull)videoDataAdEventKey SWIFT_WARN_UNUSED_RESULT;
/// 動画のサイズ
@property (nonatomic) CGSize mediaSize;
/// スキップ可能時間
@property (nonatomic, readonly, copy) NSString * _Nullable skipOffset;
/// 動画のリンククリック時の遷移先
@property (nonatomic, readonly, copy) NSURL * _Nullable videoClickThroughURL;
/// 動画コンテンツ監視
@property (nonatomic, readonly, strong) id <DACSDKMAContentPlayhead> _Nullable contentPlayhead;
/// 広告コンテナ
@property (nonatomic, readonly, strong) DACSDKMAAdContainer * _Nonnull adContainer;
/// 設定。
@property (nonatomic, readonly, strong) DACSDKMASettings * _Nonnull settings;
/// muteか否か。(readonly)
@property (nonatomic, readonly) BOOL isMute;
/// 最後の広告か否か。
@property (nonatomic, readonly) BOOL isLastAd;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// 初期化。
- (nullable instancetype)initWithAdsRequest:(DACSDKMAAdsRequest * _Nonnull)adsRequest settings:(DACSDKMASettings * _Nonnull)settings OBJC_DESIGNATED_INITIALIZER;
/// 広告をロードする。
- (void)requestWithSucceeded:(void (^ _Nonnull)(DACSDKMAVideoData * _Nonnull))succeeded failed:(void (^ _Nonnull)(DACSDKMAAdError * _Nonnull))failed;
/// 終了処理。
- (void)clean;
/// 次のAdBreakが再生可能か。
- (BOOL)playableWithTime:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
/// 再生可能か否か。
- (BOOL)canPlay SWIFT_WARN_UNUSED_RESULT;
/// 読み込み終了か否か。
- (void)isLoaded:(BOOL)newValue;
/// 再開する。
- (void)resume;
/// 一時停止する。
- (void)pause;
/// リプレイする。
- (void)replay;
/// スキップする。停止中の場合は、連続広告の最後の広告でなければ自動的に再開する。
- (BOOL)skip;
/// \code
/// skip()が完了した際に呼び出す。
///
/// \endcode
- (void)skipEnd;
/// 停止する。
- (void)stop;
/// 画面内に広告動画が存在するか否か。
- (void)toInView:(enum DACSDKMAInViewStates)newValue;
/// アクティブになった。
- (void)toActive:(BOOL)newValue;
/// 動画のリンクを見る
- (void)clickVideo;
/// コンパニオンが表示される・
- (void)createCompanionWithCompanionContainer:(DACSDKMACompanionContainer * _Nonnull)companionContainer;
/// コンパニオンをクリックする。
- (void)clickCompanionWithCompanionContainer:(DACSDKMACompanionContainer * _Nonnull)companionContainer;
/// AdBreakが再生中の場合、それを停止し、広告枠を非表示にします。表示していたAdBreakは破棄し、次のAdBreakに切り替えます。
/// \param completion <code>discardAdBreak</code>完了後に実行するクロージャー。クロージャーを実行後、<code>currentItem</code>を<code>nil</code>にします。
///
- (void)discardAdBreakWithCompletion:(void (^ _Nullable)(void))completion;
/// 広告を完全に閉じる。
/// \param completion <code>close()</code>完了後に実行されるクロージャー。クロージャーを実行後、<code>currentItem</code>を<code>nil</code>にします。
///
- (void)closeWithCompletion:(void (^ _Nullable)(void))completion;
/// フルスクリーン化を開始する。
- (void)beginEnterFullscreen;
- (void)commitEnterFullscreenWithIsMaximized:(BOOL)isMaximized;
/// インライン化を開始する。
- (void)beginExitFullscreen;
/// インライン化が終了した。
- (void)commitExitFullscreenWithWasMaximized:(BOOL)wasMaximized;
- (void)otherViewIsToFullscreen:(BOOL)newValue;
- (void)mute:(BOOL)enable;
@end


SWIFT_CLASS("_TtC8DACSDKMA23DACSDKMAVideoPlayerView")
@interface DACSDKMAVideoPlayerView : UIView <DACSDKMAAVQueuePlayerDelegate>
@property (nonatomic, getter=isHidden) BOOL hidden;
@property (nonatomic, strong) DACSDKMAAVQueuePlayer * _Nullable player;
@property (nonatomic, readonly) CGRect videoRect;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame videoData:(DACSDKMAVideoData * _Nonnull)videoData OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)dacsdkmaAVQueuePlayerWithPlayer:(DACSDKMAAVQueuePlayer * _Nonnull)player didChange:(NSString * _Nonnull)key userInfo:(id _Nullable)userInfo;
/// 再生準備
- (void)setupWithSucceeded:(void (^ _Nonnull)(void))succeeded failed:(void (^ _Nonnull)(void))failed;
/// 終了処理
- (void)clean;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class DACSDKMAVmapAdBreak;

SWIFT_CLASS("_TtC8DACSDKMA12DACSDKMAVmap")
@interface DACSDKMAVmap : NSObject
/// 動画コンテンツの再生可能秒数
@property (nonatomic, readonly) double contentDuration;
/// AdBreakのコンテナ
@property (nonatomic, copy) NSArray<DACSDKMAVmapAdBreak *> * _Nonnull adBreaks;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithContentsDuration:(double)contentsDuration adBreaks:(NSArray<DACSDKMAVmapAdBreak *> * _Nonnull)adBreaks OBJC_DESIGNATED_INITIALIZER;
@end

@class DACSDKMAVmapAdBreakEntity;
@class DACSDKMAVmapTrackingEvent;

SWIFT_CLASS("_TtC8DACSDKMA19DACSDKMAVmapAdBreak")
@interface DACSDKMAVmapAdBreak : NSObject
@property (nonatomic, readonly, strong) DACSDKMAVmapAdBreakEntity * _Nonnull adBreakEntity;
@property (nonatomic, readonly, strong) DACSDKMAVastAdNode * _Nonnull vastAdNode;
/// “start”の場合、-Double.infinity。“end”の場合、Double.infinity。
@property (nonatomic) double offsetSeconds;
@property (nonatomic, copy) NSArray<DACSDKMAVmapTrackingEvent *> * _Nonnull trackingEvents;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAdBreakEntity:(DACSDKMAVmapAdBreakEntity * _Nonnull)adBreakEntity vastAdNode:(DACSDKMAVastAdNode * _Nonnull)vastAdNode OBJC_DESIGNATED_INITIALIZER;
- (void)setupWithContentsDuration:(double)contentsDuration;
- (NSArray<DACSDKMAVmapTrackingEvent *> * _Nonnull)sendAdError:(DACSDKMAAdError * _Nonnull)adError SWIFT_WARN_UNUSED_RESULT;
@end

@class DACSDKMAVmapAdSourceEntity;
@class DACSDKMAVmapTrackingEventsEntity;

SWIFT_CLASS("_TtC8DACSDKMA25DACSDKMAVmapAdBreakEntity")
@interface DACSDKMAVmapAdBreakEntity : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TimeOffsetAttribute;)
+ (NSString * _Nonnull)TimeOffsetAttribute SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BreakTypeAttribute;)
+ (NSString * _Nonnull)BreakTypeAttribute SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BreakIdAttribute;)
+ (NSString * _Nonnull)BreakIdAttribute SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AdSourceElement;)
+ (NSString * _Nonnull)AdSourceElement SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TrackingEventsElement;)
+ (NSString * _Nonnull)TrackingEventsElement SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ExtensionsElement;)
+ (NSString * _Nonnull)ExtensionsElement SWIFT_WARN_UNUSED_RESULT;
/// AdBreakの再生タイミング。(必須)
@property (nonatomic, copy) NSString * _Nullable timeOffset;
/// 表示する広告のタイプ。(必須)
@property (nonatomic, copy) NSString * _Nullable breakType;
/// AdBreakのID(オプション)
@property (nonatomic, copy) NSString * _Nullable breakId;
/// 配信する広告のソース。(オプション)
@property (nonatomic, strong) DACSDKMAVmapAdSourceEntity * _Nullable adSource;
/// トラッキング。(オプション)
@property (nonatomic, strong) DACSDKMAVmapTrackingEventsEntity * _Nullable trackingEvents;
/// 拡張情報。(オプション)
@property (nonatomic) id _Nullable extensions;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DACSDKMAVmapAdTagURIEntity;

SWIFT_CLASS("_TtC8DACSDKMA26DACSDKMAVmapAdSourceEntity")
@interface DACSDKMAVmapAdSourceEntity : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IdAttribute;)
+ (NSString * _Nonnull)IdAttribute SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AllowMultipleAdsAttribute;)
+ (NSString * _Nonnull)AllowMultipleAdsAttribute SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FollowRedirectsAttribute;)
+ (NSString * _Nonnull)FollowRedirectsAttribute SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VastAdDataElement;)
+ (NSString * _Nonnull)VastAdDataElement SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CustomAdDataElement;)
+ (NSString * _Nonnull)CustomAdDataElement SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AdTagURIElement;)
+ (NSString * _Nonnull)AdTagURIElement SWIFT_WARN_UNUSED_RESULT;
/// AdSourceのID。(オプション)
@property (nonatomic, copy) NSString * _Nullable id;
/// VAST3.0広告のレスポンス。(オプション)
@property (nonatomic, copy) NSString * _Nullable vastAdData;
/// 非VAST3.0広告のレスポンス。CDATA内に記述。(オプション) ※ 未実装。
@property (nonatomic) id _Nullable customAdData;
/// 広告のURI。(オプション)
@property (nonatomic, strong) DACSDKMAVmapAdTagURIEntity * _Nullable adTagURI;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA26DACSDKMAVmapAdTagURIEntity")
@interface DACSDKMAVmapAdTagURIEntity : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TemplateTypeAttribute;)
+ (NSString * _Nonnull)TemplateTypeAttribute SWIFT_WARN_UNUSED_RESULT;
/// Vastのリクエスト先。(オプション？)
@property (nonatomic, copy) NSString * _Nullable adTagURI;
/// vast1/vast2/任意からレスポンスの形式を記載。(必須)
@property (nonatomic, copy) NSString * _Nullable templateType;
@property (nonatomic, readonly, copy) NSURL * _Nullable adTagURL;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA18DACSDKMAVmapEntity")
@interface DACSDKMAVmapEntity : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VersionAttribute;)
+ (NSString * _Nonnull)VersionAttribute SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AdBreakElement;)
+ (NSString * _Nonnull)AdBreakElement SWIFT_WARN_UNUSED_RESULT;
/// バージョン。(必須)
@property (nonatomic, copy) NSString * _Nullable version;
/// 広告の挿入ポイント。(必須)
@property (nonatomic, copy) NSArray<DACSDKMAVmapAdBreakEntity *> * _Nonnull adBreaks;
/// 拡張情報。(オプション)。※ 未実装
@property (nonatomic) id _Nullable extensions;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA17DACSDKMAVmapModel")
@interface DACSDKMAVmapModel : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VMAPElement;)
+ (NSString * _Nonnull)VMAPElement SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8DACSDKMA26DACSDKMAVmapTrackingEntity")
@interface DACSDKMAVmapTrackingEntity : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EventAttribute;)
+ (NSString * _Nonnull)EventAttribute SWIFT_WARN_UNUSED_RESULT;
/// トラッキングURL。(オプション？)
@property (nonatomic, copy) NSString * _Nullable trackingURI;
/// breakStart/breakEnd/errorが指定される。(必須)
@property (nonatomic, copy) NSString * _Nullable event;
@property (nonatomic, readonly, copy) NSURL * _Nullable trackingURL;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA25DACSDKMAVmapTrackingEvent")
@interface DACSDKMAVmapTrackingEvent : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// VMAPのトラッキングを送信する。
/// <ul>
///   <li>
///   </li>
/// </ul>
- (void)sendTrackingWithMacros:(NSDictionary<NSString *, NSString *> * _Nullable)macros;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8DACSDKMA32DACSDKMAVmapTrackingEventsEntity")
@interface DACSDKMAVmapTrackingEventsEntity : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TrackingElement;)
+ (NSString * _Nonnull)TrackingElement SWIFT_WARN_UNUSED_RESULT;
/// トラッキングのコンテナ。(オプション)
@property (nonatomic, copy) NSArray<DACSDKMAVmapTrackingEntity *> * _Nonnull trackings;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8DACSDKMA15DACSDKMAWebView")
@interface DACSDKMAWebView : UIWebView <UIWebViewDelegate>
@property (nonatomic, copy) void (^ _Nullable loadRequestReult)(DACSDKMAAdError * _Nullable);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)removeFromSuperview;
- (void)loadURLWithUrl:(NSURL * _Nonnull)url timeoutInterval:(NSTimeInterval)timeoutInterval result:(void (^ _Nonnull)(DACSDKMAAdError * _Nullable))result;
- (void)loadHTMLStringWithString:(NSString * _Nonnull)string baseURL:(NSURL * _Nullable)baseURL result:(void (^ _Nonnull)(DACSDKMAAdError * _Nullable))result;
- (BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWithRequest:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType SWIFT_WARN_UNUSED_RESULT;
- (void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView;
- (void)webView:(UIWebView * _Nonnull)webView didFailLoadWithError:(NSError * _Nonnull)error;
@end

#pragma clang diagnostic pop
