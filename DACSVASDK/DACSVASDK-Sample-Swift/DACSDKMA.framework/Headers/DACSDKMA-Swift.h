// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

/**
  VMAP/AdBreak用プロトコル。
  DACSDKMAAdsRequestを生成する際に引数に代入することで、AdBreakが通知されるようになります。
*/
SWIFT_PROTOCOL("_TtP8DACSDKMA23DACSDKMAContentPlayhead_")
@protocol DACSDKMAContentPlayhead
/**
  再生時間(秒)。(*readonly)
*/
@property (nonatomic, readonly) NSTimeInterval currentTime;
/**
  再生可能時間(秒)。(*readonly)
*/
@property (nonatomic, readonly) NSTimeInterval duration;
@end

@class AVPlayer;

/**
  DACSDKMAContentPlayheadをAVPlayer用に実装したクラスです。
  AVPlayerをコンテンツとして使用します。
*/
SWIFT_CLASS("_TtC8DACSDKMA31DACSDKMAAVPlayerContentPlayhead")
@interface DACSDKMAAVPlayerContentPlayhead : NSObject <DACSDKMAContentPlayhead>
/**
  コンテンツ・プレイヤー。
*/
@property (nonatomic, readonly, weak) AVPlayer * _Nullable player;
/**
  再生時間(秒)。(*readonly)
*/
@property (nonatomic, readonly) NSTimeInterval currentTime;
/**
  再生可能時間(秒)。(*readonly)
*/
@property (nonatomic, readonly) NSTimeInterval duration;
/**
  初期化。
  \param player コンテンツを表示するAVPlayerクラス。

*/
- (nonnull instancetype)initWithPlayer:(AVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
@end

@class DACSDKMACompanionSlot;
@class UIView;

/**
  広告枠の情報を保持するクラスです。
*/
SWIFT_CLASS("_TtC8DACSDKMA19DACSDKMAAdContainer")
@interface DACSDKMAAdContainer : NSObject
/**
  ユーザー広告枠ビュー。(*readonly)
*/
@property (nonatomic, readonly, weak) UIView * _Nullable view;
/**
  画像広告枠の配列。(*readonly)
*/
@property (nonatomic, readonly, copy) NSArray<DACSDKMACompanionSlot *> * _Nullable companionSlots;
/**
  初期化。
  \param view このビューに動画広告ビューがaddSubviewされます。デフォルトでは、このビューのサイズと同じサイズで表示されます。

  \param companionSlots この配列内の画像広告枠に画像広告がビューとして代入されます。画像広告が不要な場合は、nilを代入します。

*/
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view companionSlots:(NSArray<DACSDKMACompanionSlot *> * _Nullable)companionSlots OBJC_DESIGNATED_INITIALIZER;
@end

enum DACSDKMAAdErrorType : NSInteger;
enum DACSDKMAAdErrorCode : NSInteger;

/**
  広告読込中や動画再生中に発生したエラー情報を保持するクラスです。
*/
SWIFT_CLASS("_TtC8DACSDKMA15DACSDKMAAdError")
@interface DACSDKMAAdError : NSObject
/**
  エラー属性。(*readonly)
*/
@property (nonatomic, readonly) enum DACSDKMAAdErrorType type;
/**
  エラー・コード。(*readonly)
*/
@property (nonatomic, readonly) enum DACSDKMAAdErrorCode code;
/**
  エラー・メッセージ。(*readonly)
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@end

/**
  エラー・コードを表す列挙型です。
*/
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdErrorCode) {
/**
  その他・原因不明のエラーです。
*/
  DACSDKMAAdErrorCodeUnknownError = 900,
/**
  XML解析に失敗しました。
*/
  DACSDKMAAdErrorCodeVastXmlParsingError = 100,
/**
  VASTが不正です。
*/
  DACSDKMAAdErrorCodeVastInvalidSchema = 101,
/**
  VASTリクエストが時間内に返りませんでした。
*/
  DACSDKMAAdErrorCodeVastWrapperLoadTimeout = 301,
/**
  Wrapperのリダイレクト回数が上限に達しました。
*/
  DACSDKMAAdErrorCodeVastTooManyRedirects = 302,
/**
  Wrapper内のURLにリクエストしましたが、広告がありませんでした。
*/
  DACSDKMAAdErrorCodeVastNoAds = 303,
/**
  動画プレーヤーがリニア広告を表示できませんでした。
*/
  DACSDKMAAdErrorCodeVideoPlayerError = 400,
/**
  メディアファイルURLにリクエストしましたが、ファイルが存在しませんでした。
*/
  DACSDKMAAdErrorCodeVastMediaFileNotFound = 401,
/**
  メディアファイルURLにリクエストしましたが、時間内にレスポンスが返ってきませんでした。
*/
  DACSDKMAAdErrorCodeVastMediaLoadTimeout = 402,
/**
  SDKでサポートしているメディアファイルがありませんでした。
*/
  DACSDKMAAdErrorCodeVastLinearAssetMismatch = 403,
/**
  サポートしているノンリニアリソースを見つけられませんでした。
*/
  DACSDKMAAdErrorCodeVastNonlinearAdResourceNotFound = 503,
/**
  画像広告の取得に失敗しました。
*/
  DACSDKMAAdErrorCodeVastCompanionAdLoadingFailed = 603,
/**
  サポートしている画像広告のリソースがありませんでした。
*/
  DACSDKMAAdErrorCodeVastCompanionAdResourceNotFound = 604,
/**
  VMAP schema error
*/
  DACSDKMAAdErrorCodeVmapInvalidSchema = 1000,
/**
  VMAP version of response not supported
*/
  DACSDKMAAdErrorCodeVmapVastVersionNotSupported = 1001,
/**
  VMAP parsing error
*/
  DACSDKMAAdErrorCodeVmapXmlParsingError = 1002,
/**
  AdBlock type not supported
*/
  DACSDKMAAdErrorCodeVmapAdBlockTypeNotSupported = 1003,
/**
  General ad response dosument error
*/
  DACSDKMAAdErrorCodeVmapAdError = 1004,
/**
  Ad response template type not supported
*/
  DACSDKMAAdErrorCodeVmapAdTypeNotSupported = 1005,
/**
  Ad response document extraction or parsing error
*/
  DACSDKMAAdErrorCodeVmapAdParsingError = 1006,
/**
  Ad response document retrieval timeout
*/
  DACSDKMAAdErrorCodeVmapAdLoadTimeout = 1007,
/**
  Ad response document retrieval error(e.g., HTTP server responded with error code)
*/
  DACSDKMAAdErrorCodeVmapAdLoadError = 1008,
/**
  ネットワークが切断されています。
*/
  DACSDKMAAdErrorCodeNetworkNotReachable = 100000,
/**
  無効なパラメータです。
*/
  DACSDKMAAdErrorCodeInvalidParameter = 100001,
/**
  データリクエストに失敗しました。
*/
  DACSDKMAAdErrorCodeDataRequestFailed = 100002,
/**
  再生可能な動画広告が一つも存在しませんでした。
*/
  DACSDKMAAdErrorCodeNoMediaFileURL = 100003,
/**
  iOSのバージョンが古いためSDKを利用できません。
*/
  DACSDKMAAdErrorCodeUnsupportedIOSVersion = 100004,
/**
  動画広告枠が存在しません。
*/
  DACSDKMAAdErrorCodeNoAdContainerView = 100005,
};

/**
  広告データ読み込み中、および再生中に発生したエラー属性を表す列挙型です。
*/
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdErrorType) {
/**
  VASTやクリエイティブのロードに関するエラーです。
*/
  DACSDKMAAdErrorTypeLoadingFailed = 0,
/**
  広告再生に関するエラーです。
*/
  DACSDKMAAdErrorTypePlayingFailed = 1,
/**
  その他・原因不明のエラーです。
*/
  DACSDKMAAdErrorTypeUnknown = 2,
};

enum DACSDKMAAdEventType : NSInteger;

/**
  広告再生に関するイベント情報を保持するクラスです。
*/
SWIFT_CLASS("_TtC8DACSDKMA15DACSDKMAAdEvent")
@interface DACSDKMAAdEvent : NSObject
/**
  イベント属性。(*readonly)
*/
@property (nonatomic, readonly) enum DACSDKMAAdEventType type;
/**
  イベント情報。(*readonly)
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable adData;
/**
  イベント名。(*readonly)
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@end

/**
  広告再生に関するイベント属性を表す列挙型です。
*/
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdEventType) {
/**
  AdBreakが開始しました。
*/
  DACSDKMAAdEventTypeDidAdBreakStart = 0,
/**
  AdBreakが終了しました。
*/
  DACSDKMAAdEventTypeDidAdBreakEnd = 1,
/**
  広告データの読み込みが完了しました。
*/
  DACSDKMAAdEventTypeDidLoad = 2,
/**
  動画広告が再生開始しました。
*/
  DACSDKMAAdEventTypeDidStart = 3,
/**
  動画広告が”1/4”再生されました。
*/
  DACSDKMAAdEventTypeDidFirstQuartile = 4,
/**
  動画広告が”1/2”再生されました。
*/
  DACSDKMAAdEventTypeDidMidpoint = 5,
/**
  動画広告が”3/4”再生されました。
*/
  DACSDKMAAdEventTypeDidThirdQuartile = 6,
/**
  動画広告が再生完了しました。
*/
  DACSDKMAAdEventTypeDidComplete = 7,
/**
  VMAPも含めて、すべての動画広告が再生完了しました。
*/
  DACSDKMAAdEventTypeDidAllAdsComplete = 8,
/**
  動画広告が再開しました。再生開始時は通知されません。
*/
  DACSDKMAAdEventTypeDidResume = 9,
/**
  動画広告が一時停止しました。
*/
  DACSDKMAAdEventTypeDidPause = 10,
/**
  動画広告が停止しました。
*/
  DACSDKMAAdEventTypeDidStop = 11,
/**
  動画広告がスキップします。
*/
  DACSDKMAAdEventTypeWillSkip = 12,
/**
  動画広告がスキップしました。
*/
  DACSDKMAAdEventTypeDidSkip = 13,
/**
  動画広告がクリックされました。
*/
  DACSDKMAAdEventTypeDidClick = 14,
/**
  広告枠が最大化します。
*/
  DACSDKMAAdEventTypeWillEnterFullscreen = 15,
/**
  広告枠が最大化しました。
*/
  DACSDKMAAdEventTypeDidEnterFullscreen = 16,
/**
  最大化した広告枠が元のサイズに戻ります。
*/
  DACSDKMAAdEventTypeWillExitFullscreen = 17,
/**
  最大化した広告枠が元のサイズに戻りました。
*/
  DACSDKMAAdEventTypeDidExitFullscreen = 18,
/**
  広告枠が閉じられました。
*/
  DACSDKMAAdEventTypeDidClose = 19,
/**
  動画広告の静音状態が解除されました。
*/
  DACSDKMAAdEventTypeDidUnMute = 20,
/**
  動画広告が静音状態になりました。
*/
  DACSDKMAAdEventTypeDidMute = 21,
/**
  コンパニオンが表示されました。
*/
  DACSDKMAAdEventTypeDidCompanionCreativeView = 22,
/**
  コンパニオンがクリックされました。
*/
  DACSDKMAAdEventTypeDidCompanionClick = 23,
/**
  動画広告の表示可能状態が変化しました。
*/
  DACSDKMAAdEventTypeDidChangePlayableStatus = 24,
/**
  動画広告がシークされます。
*/
  DACSDKMAAdEventTypeWillSeek = 25,
/**
  動画広告がシークされました。
*/
  DACSDKMAAdEventTypeDidSeek = 26,
/**
  指定されたProgressイベントまで到達しました。
*/
  DACSDKMAAdEventTypeDidProgress = 27,
};

enum DACSDKMAInViewStates : NSInteger;

/**
  動画広告の再生可能状態に関する情報を保持するクラスです。
*/
SWIFT_CLASS("_TtC8DACSDKMA29DACSDKMAAdVideoPlayableStates")
@interface DACSDKMAAdVideoPlayableStates : NSObject <NSCopying>
/**
  インビュー状態。(*readonly)
*/
@property (nonatomic, readonly) enum DACSDKMAInViewStates inViewStatus;
/**
  起動中のアプリ内に存在するか否か。(*readonly)
*/
@property (nonatomic, readonly) BOOL isOnScreen;
/**
  他の広告ビューがフルスクリーンで表示されているか、否か。(*readonly)
*/
@property (nonatomic, readonly) BOOL isOtherViewInFullscreen;
/**
  画面内に存在しているか否か。(*readonly)
*/
@property (nonatomic, readonly) BOOL hasWindow;
/**
  再生可能か否かを判定します。

  returns:
  再生可能な場合はtrue、不可能な場合はfalseを返します。
*/
- (BOOL)isPlayable;
/**
  Returns a Boolean value that indicates whether the receiver is equal to another given object.
  \param object The object with which to compare the receiver.


  returns:
  true if the receiver is equal to object, otherwise false. In effect returns false if receiver is nil.
*/
- (BOOL)isEqual:(id _Nullable)object;
/**
  Required. Returns a new instance that’s a copy of the receiver.
  \param zone This parameter is ignored. Memory zones are no longer used by Objective-C.


  returns:
  New instance that’s a copy of the receiver.
*/
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone;
@end

/**
  動画広告の再生状態を表す列挙型です。
*/
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdVideoPlaybackStates) {
/**
  再生中
*/
  DACSDKMAAdVideoPlaybackStatesPlaying = 0,
/**
  一時停止中
*/
  DACSDKMAAdVideoPlaybackStatesPausing = 1,
/**
  停止中
*/
  DACSDKMAAdVideoPlaybackStatesStopped = 2,
/**
  不明
*/
  DACSDKMAAdVideoPlaybackStatesUnknown = 3,
};

/**
  動画広告の表示状態を表す列挙型です。
*/
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdViewMode) {
/**
  最小化
*/
  DACSDKMAAdViewModeMinimized = 0,
/**
  通常
*/
  DACSDKMAAdViewModeNormal = 1,
/**
  インタースティシャル
*/
  DACSDKMAAdViewModeInterstitial = 2,
/**
  最大化
*/
  DACSDKMAAdViewModeMaximized = 3,
};

@class DACSDKMAAdsManager;

/**
  広告データの読み込に成功した際、通知されるクラスです。
*/
SWIFT_CLASS("_TtC8DACSDKMA21DACSDKMAAdsLoadedData")
@interface DACSDKMAAdsLoadedData : NSObject
/**
  広告マネージャー。(*readonly)
*/
@property (nonatomic, readonly, strong) DACSDKMAAdsManager * _Nonnull adsManager;
@end

@class DACSDKMASettings;
@class DACSDKMAAdsRequest;
@protocol DACSDKMAAdsLoaderDelegate;

/**
  広告データを読み込む為のクラスです。
*/
SWIFT_CLASS("_TtC8DACSDKMA17DACSDKMAAdsLoader")
@interface DACSDKMAAdsLoader : NSObject
/**
  デリゲート。
*/
@property (nonatomic, weak) id <DACSDKMAAdsLoaderDelegate> _Nullable delegate;
/**
  初期化。
  \param settings 広告データの読み込み設定クラス。(内部でコピーして使用する為、初期化後に変更しても反映されません。)

*/
- (nonnull instancetype)initWithSettings:(DACSDKMASettings * _Nonnull)settings OBJC_DESIGNATED_INITIALIZER;
/**
  広告をリクエストします。
  \param adsRequest 広告データをリクエストする為のクラス。

*/
- (void)requestAds:(DACSDKMAAdsRequest * _Nonnull)adsRequest;
@end


/**
  DACSDKMAAdsLoaderのデリゲートです。
*/
SWIFT_PROTOCOL("_TtP8DACSDKMA25DACSDKMAAdsLoaderDelegate_")
@protocol DACSDKMAAdsLoaderDelegate
/**
  広告データの読み込みに成功しました。
  \param loader 通知元のDACSDKMAAdsLoaderクラス。

  \param adsLoadedData 成功時のDACSDKMAAdsLoadedDataクラス。

*/
- (void)dacsdkmaAdsLoader:(DACSDKMAAdsLoader * _Nonnull)loader didLoad:(DACSDKMAAdsLoadedData * _Nonnull)adsLoadedData;
/**
  広告データの読み込みに失敗しました。
  \param loader 通知元のDACSDKMAAdsLoaderクラス。

  \param adError 失敗時のDACSDKMAAdErrorクラス。

*/
- (void)dacsdkmaAdsLoader:(DACSDKMAAdsLoader * _Nonnull)loader didFail:(DACSDKMAAdError * _Nonnull)adError;
@end

@protocol DACSDKMAAdsManagerDelegate;

/**
  広告データを操作する為のクラスです。
*/
SWIFT_CLASS("_TtC8DACSDKMA18DACSDKMAAdsManager")
@interface DACSDKMAAdsManager : NSObject
/**
  デリゲート。
*/
@property (nonatomic, weak) id <DACSDKMAAdsManagerDelegate> _Nullable delegate;
/**
  広告データ読み込み時の設定のコピーを返します。(*readonly)
*/
@property (nonatomic, readonly, strong) DACSDKMASettings * _Nonnull settings;
/**
  広告枠。(*readonly)
*/
@property (nonatomic, readonly, strong) DACSDKMAAdContainer * _Nonnull adContainer;
/**
  動画広告の再生可能時間(秒)。(*readonly)
*/
@property (nonatomic, readonly) double durationTime;
/**
  AdBreak内の最後の広告か否か。(*readonly)
*/
@property (nonatomic, readonly) BOOL isLastAd;
/**
  動画広告がスキップ可能か否か。
*/
@property (nonatomic, readonly) BOOL isSkippable;
/**
  SDK広告枠ビュー。adContainer.viewにaddSubviewされています。(*readonly)
*/
@property (nonatomic, readonly, strong) UIView * _Nullable adSpotView;
/**
  動画広告が実際に表示されるビュー。adSpotViewにaddSubviewされています。(*readonly)
*/
@property (nonatomic, readonly, strong) UIView * _Nullable adVideoView;
/**
  動画広告メディアの解像度。(*readonly)
*/
@property (nonatomic, readonly) CGSize videoSize;
/**
  動画広告の静音状態。(*readonly)
*/
@property (nonatomic, readonly) BOOL isMute;
/**
  フルスクリーン状態。(*readonly)
*/
@property (nonatomic, readonly) BOOL isFullscreen;
/**
  動画広告表の示部分のサイズ。(*readonly)
*/
@property (nonatomic, readonly) CGRect videoRect;
/**
  動画広告の再生時間(秒)。(*readonly)
*/
@property (nonatomic, readonly) double progressTime;
/**
  動画広告の再生位置(0.0〜1.0)。(*readonly)
*/
@property (nonatomic, readonly) double progress;
/**
  動画広告のスキップ可能になるまでの残り時間(秒)。Double.NaNの場合はskip不可能。(*readonly)
*/
@property (nonatomic, readonly) double skipRemainingTime;
/**
  動画広告の表示状態。(*readonly)
*/
@property (nonatomic, readonly, strong) DACSDKMAAdVideoPlayableStates * _Nonnull playableStatus;
/**
  動画広告の再生状態。(*readonly)
*/
@property (nonatomic, readonly) enum DACSDKMAAdVideoPlaybackStates playbackStatus;
/**
  動画広告の表示状態。(*readonly)
*/
@property (nonatomic, readonly) enum DACSDKMAAdViewMode adViewMode;
/**
  最後に発生した広告イベント。(*readonly)
*/
@property (nonatomic, readonly, strong) DACSDKMAAdEvent * _Nonnull adEvent;
/**
  表示される/表示された動画広告の総数。(*readonly)
*/
@property (nonatomic, readonly) NSInteger totalAdsCount;
/**
  現在表示中の広告も含めた動画広告の残数。(*readonly)
*/
@property (nonatomic, readonly) NSInteger remainingAdsCount;
/**
  現在表示中、もしくは次に表示される動画広告配列のインデックス。(*readonly)
*/
@property (nonatomic, readonly) NSInteger currentAdIndex;
/**
  広告データを読み込みます。
  ロードが成功した場合、広告枠に動画広告ビューがaddSubviewされます。
  ロード中、ロード済みの場合、何もせずにcompletionを実行します。
  \param completion 完了時に実行されるクロージャー。成功した場合はtrue、失敗した場合はfalseが引数としてresultに渡されます。ロード中、またはロード済みの場合、resultはtrueになります。

*/
- (void)loadWithCompletion:(void (^ _Nullable)(BOOL))completion;
/**
  終了処理。動画広告の再生を終了し、閉じた後に使用したインスタンスなどを解放します。
  このメソッドの実行により動画が閉じられた場合、コンテンツの再開は通知されません。
*/
- (void)clean;
/**
  動画広告を再開します。
*/
- (void)play;
/**
  動画広告を一時停止します。
*/
- (void)pause;
/**
  動画広告を停止します。
*/
- (void)stop;
/**
  動画広告をリプレイします。
*/
- (void)replay;
/**
  動画広告をスキップします。
*/
- (void)skip;
/**
  動画広告をクリックします。
*/
- (void)clickVideo;
/**
  広告の表示状態を変更します。
  \param adViewMode 変更後の広告表示状態。

  \param areAnimationsEnabled アニメーションの有無。アニメーションを行う場合はtrue、行わない場合はfalse。デフォルトではtrueです。

  \param completion 広告の表示状態が完了した際に実行されるクロージャー。成功した場合はtrue、失敗した場合はfalseが引数としてresultに渡されます。このメソッドの前後において、表示状態に変化が無い場合はtrueになります。

*/
- (void)changeAdViewMode:(enum DACSDKMAAdViewMode)adViewMode areAnimationsEnabled:(BOOL)areAnimationsEnabled completion:(void (^ _Nullable)(BOOL))completion;
/**
  動画の静音状態を変更します。
  \param isEnable trueの場合は静音、falseの場合は元に戻します。

*/
- (void)mute:(BOOL)isEnable;
/**
  動画広告の再生を終了し、閉じます。アプリ、またはユーザーが閉じるボタンなどをクリックするなどの処理を行った際に呼び出します。
  \param completion このメソッドが完了した際に実行されるクロージャー。

*/
- (void)closeWithCompletion:(void (^ _Nullable)(void))completion;
/**
  AdBreakが再生中の場合、それを停止し、広告枠を閉じ、デリゲートにコンテンツの再開を通知をします。
  AdBreakが再生前に呼び出した場合、動画広告の再生はキャンセルされます。コンテンツの再開は通知されません。
*/
- (void)discardAdBreak;
@end


/**
  DACSDKMAAdsManagerのデリゲートです。
*/
SWIFT_PROTOCOL("_TtP8DACSDKMA26DACSDKMAAdsManagerDelegate_")
@protocol DACSDKMAAdsManagerDelegate
/**
  イベントを受け取った際に呼ばれます。
  \param adsManager 通知元のDACSDKMAAdsManagerクラス。

  \param adEvent 発生したDACSDKMAAdEventクラス。

*/
- (void)dacsdkmaAdsManager:(DACSDKMAAdsManager * _Nonnull)adsManager didReceiveAdEvent:(DACSDKMAAdEvent * _Nonnull)adEvent;
/**
  エラーを受け取った際に呼ばれます。
  \param adsManager 通知元のDACSDKMAAdsManagerクラス。

  \param adError 発生したDACSDKMAAdErrorクラス。

*/
- (void)dacsdkmaAdsManager:(DACSDKMAAdsManager * _Nonnull)adsManager didReceiveAdError:(DACSDKMAAdError * _Nonnull)adError;
/**
  動画広告が再生開始、レジュームした際に呼ばれます。アプリのビデオコンテンツに停止を要求します。
  \param adsManager 通知元のDACSDKMAAdsManagerクラス。

*/
- (void)dacsdkmaAdsManagerDidRequestContentPause:(DACSDKMAAdsManager * _Nonnull)adsManager;
/**
  動画広告が一時停止、正常終了・エラー終了した際に呼ばれます。アプリのビデオコンテンツに再生を要求します。
  \param adsManager 通知元のDACSDKMAAdsManagerクラス。

*/
- (void)dacsdkmaAdsManagerDidRequestContentResume:(DACSDKMAAdsManager * _Nonnull)adsManager;
@end


/**
  広告データをリクエストする為のクラスです。
*/
SWIFT_CLASS("_TtC8DACSDKMA18DACSDKMAAdsRequest")
@interface DACSDKMAAdsRequest : NSObject
/**
  広告タグURL文字列。(*readonly)。
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull adTagURI;
/**
  広告枠クラス。(*readonly)。
*/
@property (nonatomic, readonly, strong) DACSDKMAAdContainer * _Nonnull adContainer;
/**
  VMAP/AdBreak用コンテンツ情報 (readonly)
*/
@property (nonatomic, readonly, strong) id <DACSDKMAContentPlayhead> _Nullable contentPlayhead;
/**
  初期化。
  \param adTagURI 広告タグURL文字列。

  \param adContainer 広告枠クラス。

  \param contentPlayhead DACSDKMAContentPlayheadを継承したクラス。VMAPでAdBreakを利用する際に使用します。不要な場合は、nilにします。デフォルトではnilです。

*/
- (nonnull instancetype)initWithAdTagURI:(NSString * _Nonnull)adTagURI adContainer:(DACSDKMAAdContainer * _Nonnull)adContainer contentPlayhead:(id <DACSDKMAContentPlayhead> _Nullable)contentPlayhead OBJC_DESIGNATED_INITIALIZER;
@end


/**
  画像広告枠クラス。
*/
SWIFT_CLASS("_TtC8DACSDKMA21DACSDKMACompanionSlot")
@interface DACSDKMACompanionSlot : NSObject
/**
  画像広告を追加するビュー。(*readonly)
*/
@property (nonatomic, readonly, weak) UIView * _Nullable slot;
/**
  追加する画像広告のサイズ。(*readonly)
*/
@property (nonatomic, readonly) CGSize size;
/**
  画像広告ビュー。slotにこのviewがaddSubviewされます。(*readonly)
*/
@property (nonatomic, readonly, strong) UIView * _Nullable companion;
/**
  画像広告の大きさ。(*readonly)
*/
@property (nonatomic, readonly) CGSize companionSize;
@end


/**
  動画広告の視認状態
*/
typedef SWIFT_ENUM(NSInteger, DACSDKMAInViewStates) {
/**
  完全に親ビューの内部にあります。
*/
  DACSDKMAInViewStatesIncluded = 0,
/**
  ビューと親ビューが一部交差しています。親ビューの内部にあります。
*/
  DACSDKMAInViewStatesIntersectIn = 1,
/**
  ビューと親ビューが一部交差しています。親ビューの外部にあります。
*/
  DACSDKMAInViewStatesIntersectOut = 2,
/**
  完全に親ビューの外部にあります。
  もしくは、hidden == true、alpha <= 0.0、superviewやwindowを所持していません。
*/
  DACSDKMAInViewStatesExcluded = 3,
/**
  不明な状態です。
*/
  DACSDKMAInViewStatesUnknown = 4,
};


/**
  広告読み込み時の設定クラス
*/
SWIFT_CLASS("_TtC8DACSDKMA16DACSDKMASettings")
@interface DACSDKMASettings : NSObject <NSCopying>
/**
  動画広告の読み込みが完了次第、自動的に再生開始するか否か。
*/
@property (nonatomic) BOOL isAutoStart;
/**
  次のAdBreakに自動的に遷移するか否か。
*/
@property (nonatomic) BOOL isAutoAdvanceToNextAdBreak;
/**
  動画広告終了時に、広告枠を自動的に非表示にするか否か。
*/
@property (nonatomic) BOOL isAutoAdHidden;
/**
  動画広告が切り替わった際に、コンパニオン・ビューを自動的に削除するか否か。
*/
@property (nonatomic) BOOL isAutoRemoveCompanion;
/**
  動画広告起動時のmute設定。
*/
@property (nonatomic) BOOL isMute;
/**
  ラッパー広告などをリダイレクトする際の最大回数。
*/
@property (nonatomic) NSUInteger vastMaxRedirects;
/**
  VASTをリクエストした際のタイムアウト。
*/
@property (nonatomic) NSTimeInterval vastResourceTimeOutSeconds;
/**
  VASTのリクエストを開始してから、すべてのVASTのロードが完了するまでのタイムアウト。
*/
@property (nonatomic) NSTimeInterval vastAllResourceTimeOutSeconds;
/**
  動画ファイルを読み込む際のタイムアウト時間。
*/
@property (nonatomic) NSTimeInterval mediaLoadTimeOutSeconds;
/**
  動画ファイルを読み込み際のエラーを許容する回数。
*/
@property (nonatomic) NSUInteger adPlaybackStalledLimit;
/**
  広告ビュー状態。
*/
@property (nonatomic) enum DACSDKMAAdViewMode adViewMode;
/**
  Required. Returns a new instance that’s a copy of the receiver.
  \param zone This parameter is ignored. Memory zones are no longer used by Objective-C.


  returns:
  New instance that’s a copy of the receiver.
*/
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
