// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class DACSDKPingVApplicationDataCenter;

/**
  アプリ情報や表示状態などを収集するクラスを管理するためのクラスです。
*/
SWIFT_CLASS("_TtC11DACSDKPingV11DACSDKPingV")
@interface DACSDKPingV : NSObject
/**
  シングルトンのインタスンスを返します。
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DACSDKPingV * _Nonnull shared;)
+ (DACSDKPingV * _Nonnull)shared;
/**
  データオーナーIDハッシュ: setup(oid:)にて設定します。(* readonly)
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull oid;
/**
  アプリケーションデータを送信するためのクラス: (* readonly)
*/
@property (nonatomic, readonly, strong) DACSDKPingVApplicationDataCenter * _Nonnull applicationDataCenter;
/**
  デバッグログ出力モード: 初期値は”false”です。
*/
@property (nonatomic) BOOL debugMode;
@property (nonatomic, copy) NSString * _Nonnull _oid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  初期化。アプリの起動時などに実行してください。
  \param oid データオーナーIDハッシュ。

*/
- (void)setupWithOid:(NSString * _Nonnull)oid;
@end


SWIFT_CLASS("_TtC11DACSDKPingV26DACSDKPingVApplicationData")
@interface DACSDKPingVApplicationData : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL debugMode;)
+ (BOOL)debugMode;
+ (void)setDebugMode:(BOOL)newValue;
+ (void)initialize SWIFT_METHOD_FAMILY(none);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocation;
@protocol DACSDKPingVApplicationDataCenterDelegate;

/**
  アプリの情報などを収集し、DACのサーバーへ通知するためのクラス。
*/
SWIFT_CLASS("_TtC11DACSDKPingV32DACSDKPingVApplicationDataCenter")
@interface DACSDKPingVApplicationDataCenter : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DACSDKPingVApplicationDataCenter * _Nonnull shared;)
+ (DACSDKPingVApplicationDataCenter * _Nonnull)shared;
/**
  アプリケーションデータ・自動送信フラグ: 初期値は”true”です。trueの場合、アプリケーションがバックグラウンドに遷移する際に収集したデータを送信します。
*/
@property (nonatomic) BOOL autoSend;
/**
  アプリケーション起動時間・自動更新フラグ: 初期値は”true”です。trueの場合、アプリケーションがフォアグラウンドに遷移した際に起動時間が初期化されます。
*/
@property (nonatomic) BOOL autoRestart;
/**
  リクエスト結果通知用 delegate (任意)
*/
@property (nonatomic, weak) id <DACSDKPingVApplicationDataCenterDelegate> _Nullable delegate;
/**
  データオーナーIDハッシュ (* 必須): DACSDKPingV.shared.setup(oid:)にて設定します。(* readonly)
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull oid;
/**
  ページ識別子 (任意)
*/
@property (nonatomic, copy) NSString * _Nullable page_id;
/**
  イベント識別子 (任意): * sendApplicationData()が実行される毎に「空の配列」で初期化されます。
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull event_ids;
/**
  位置情報 (任意): locationのコピーを保持し、それを返します。
*/
@property (nonatomic, strong) CLLocation * _Nullable location;
/**
  その他収集データ (任意): replaceExtras(_:)にて設定します。(* readonly)
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull extras;
@property (nonatomic, copy) NSString * _Nonnull _oid;
@property (nonatomic, readonly, copy) NSString * _Nullable idfa;
@property (nonatomic, readonly) NSInteger idfa_limited;
@property (nonatomic, readonly, copy) NSString * _Nonnull td_ip;
@property (nonatomic, readonly, copy) NSString * _Nullable language;
@property (nonatomic, readonly, copy) NSString * _Nonnull locale;
@property (nonatomic, readonly, copy) NSString * _Nonnull timezone;
@property (nonatomic, readonly, copy) NSString * _Nullable carrier;
@property (nonatomic, readonly, copy) NSString * _Nullable network;
@property (nonatomic, readonly, copy) NSString * _Nullable ssid;
@property (nonatomic, readonly, copy) NSString * _Nonnull os;
@property (nonatomic, readonly, copy) NSString * _Nonnull os_version;
@property (nonatomic, readonly, copy) NSString * _Nullable useragent;
@property (nonatomic, readonly, copy) NSString * _Nonnull device_maker;
@property (nonatomic, readonly, copy) NSString * _Nullable device_model;
@property (nonatomic, readonly) NSInteger height;
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly, copy) NSString * _Nullable bundle_id;
@property (nonatomic, readonly, copy) NSString * _Nullable app_name;
@property (nonatomic, readonly, copy) NSString * _Nullable app_version;
@property (nonatomic, readonly, copy) NSString * _Nullable url_scheme;
@property (nonatomic, readonly, copy) NSString * _Nullable location_accuracy;
@property (nonatomic, readonly, copy) NSString * _Nullable location_provider;
@property (nonatomic, readonly, copy) NSString * _Nullable longitude;
@property (nonatomic, readonly, copy) NSString * _Nullable latitude;
@property (nonatomic, readonly) NSInteger usagetime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  アプリ起動時間を初期化します。
*/
- (void)restart;
/**
  extrasを入れ替えます。JSON化できない場合は、入れ替えできません。
  <ul>
    <li>
      Top level object is an NSArray or NSDictionary.
    </li>
    <li>
      All objects are NSString, NSNumber, NSArray, NSDictionary, or NSNull.
    </li>
    <li>
      All dictionary keys are NSStrings.
    </li>
    <li>
      NSNumbers are not NaN or infinity.
    </li>
  </ul>
  \param extras JSONデータ。


  returns:
  成功した場合はtrue、失敗した場合はfalse。
*/
- (BOOL)replaceExtras:(NSDictionary<NSString *, id> * _Nonnull)extras;
/**
  アプリケーション情報をサーバーにリクエストします。
  <ul>
    <li>
      setup()時にautoSendApplicationDataを有効にしている場合、アプリがバックラグラウンドに遷移した際に自動的に実行されます。
    </li>
    <li>
      delegateが有効な場合、先にdelegateに通知したのちにcompletionHandlerが実行されます。
    </li>
  </ul>
  \param completionHandler リクエスト完了後に起動するクロージャーです。リクエスト時にエラーが発生した場合、それがErrorの引数として渡されます。エラーコードについては、DACSDKPingVErrorCodeを参照ください。

*/
- (void)send:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
- (void)applicationWillEnterForeground:(NSNotification * _Nonnull)notification;
- (void)applicationDidEnterBackground:(NSNotification * _Nonnull)notification;
@end


/**
  サーバへのリクエスト結果を返すDelegate。
*/
SWIFT_PROTOCOL("_TtP11DACSDKPingV40DACSDKPingVApplicationDataCenterDelegate_")
@protocol DACSDKPingVApplicationDataCenterDelegate
/**
  sendApplicationData()が実行完了する毎に呼ばれます。
  \param ping sendApplicationData()を実行した、DACSDKPingVのインスタンス。

  \param error リクエストが成功した場合は、nil。 リクエスト時にエラーが発生した場合、それがErrorの引数として渡されます。エラーコードについては、DACSDKPingVErrorCodeを参照ください。

*/
- (void)dacSdkPingVWithApplicationDataCenter:(DACSDKPingVApplicationDataCenter * _Nonnull)applicationDataCenter didSendApplicationDataWithError:(NSError * _Nullable)error;
@end

@class NSCoder;
enum DACSDKPingVErrorCode : NSInteger;

SWIFT_CLASS("_TtC11DACSDKPingV16DACSDKPingVError")
@interface DACSDKPingVError : NSError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull domain;)
+ (NSString * _Nonnull)domain;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary * _Nullable)dict SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCode:(enum DACSDKPingVErrorCode)code message:(NSString * _Nullable)message error:(NSError * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end

/**
  エラーコード
*/
typedef SWIFT_ENUM(NSInteger, DACSDKPingVErrorCode) {
/**
  不明。
*/
  DACSDKPingVErrorCodeUnknown = 0,
/**
  OwnerIDが定義されていません。
*/
  DACSDKPingVErrorCodeNotDefinedOwnerID = 1,
/**
  SDKで定義しているDACサーバーのURLに誤りがあります。
*/
  DACSDKPingVErrorCodeInvalidServerURL = 2,
/**
  JSON化できないオブジェクトがパラメータに存在してます。
*/
  DACSDKPingVErrorCodeInvalidJSONObject = 3,
/**
  JSONのシリアライズ化に失敗しました。
*/
  DACSDKPingVErrorCodeJsonSerializationException = 4,
/**
  HTTPリクエストに失敗しました。
*/
  DACSDKPingVErrorCodeHttpRequestFailed = 5,
/**
  HTTPレスポンスが空です。
*/
  DACSDKPingVErrorCodeHttpResponseIsEmpty = 6,
/**
  HTTPステータスコードが200以外です。
*/
  DACSDKPingVErrorCodeHttpStatusCodeError = 7,
};


@interface NSString (SWIFT_EXTENSION(DACSDKPingV))
@end

#pragma clang diagnostic pop
