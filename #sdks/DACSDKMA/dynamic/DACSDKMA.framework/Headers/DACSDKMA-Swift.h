// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

SWIFT_CLASS("_TtC8DACSDKMA8DACSDKMA")
@interface DACSDKMA : NSObject

/// フルスクリーンであればtrue、インラインであればfalseを返す。
@property (nonatomic, readonly) BOOL isFullScreen;
@end



/// VMAP/AdBreak用プロトコル。
SWIFT_PROTOCOL("_TtP8DACSDKMA23DACSDKMAContentPlayhead_")
@protocol DACSDKMAContentPlayhead

/// 再生時間（秒）
@property (nonatomic, readonly) NSTimeInterval currentTime;

/// 再生可能時間(秒)
@property (nonatomic, readonly) NSTimeInterval duration;
@end

@class AVPlayer;


/// DACSDKMAContentPlayheadをAVPlayer用に実装したクラス。 AVPlayerをコンテンツとして利用する場合に、使用する。
SWIFT_CLASS("_TtC8DACSDKMA31DACSDKMAAVPlayerContentPlayhead")
@interface DACSDKMAAVPlayerContentPlayhead : NSObject <DACSDKMAContentPlayhead>

/// コンテンツ・プレイヤー.
@property (nonatomic, readonly, weak) AVPlayer * _Nullable player;
@property (nonatomic, readonly) NSTimeInterval currentTime;
@property (nonatomic, readonly) NSTimeInterval duration;
- (nonnull instancetype)initWithAVPlayer:(AVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
@end

@class DACSDKMACompanionSlot;
@class UIView;


/// 広告枠クラス
SWIFT_CLASS("_TtC8DACSDKMA19DACSDKMAAdContainer")
@interface DACSDKMAAdContainer : NSObject

/// 動画広告を追加する枠のビュー。(readonly) このビューのサイズと同じ大きさで表示されます。
@property (nonatomic, readonly, weak) UIView * _Nullable view;

/// コンパニオン枠コンテナ。(readonly)
@property (nonatomic, readonly, copy) NSArray<DACSDKMACompanionSlot *> * _Nullable companionSlots;

/// 初期化
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view companionSlots:(NSArray<DACSDKMACompanionSlot *> * _Nullable)companionSlots OBJC_DESIGNATED_INITIALIZER;
@end

enum DACSDKMAAdErrorType : NSInteger;
enum DACSDKMAAdErrorCode : NSInteger;


/// 広告ロード中や動画再生中に発生したエラークラス。
SWIFT_CLASS("_TtC8DACSDKMA15DACSDKMAAdError")
@interface DACSDKMAAdError : NSObject

/// エラー属性
@property (nonatomic, readonly) enum DACSDKMAAdErrorType type;

/// エラー・コード
@property (nonatomic, readonly) enum DACSDKMAAdErrorCode code;

/// エラー・メッセージ
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@end


/// エラー・コード
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdErrorCode) {

/// その他・原因不明のエラー
  DACSDKMAAdErrorCodeUnknownError = 900,

/// XML解析に失敗した。
  DACSDKMAAdErrorCodeVastXmlParsingError = 100,

/// VASTが不正だった。 VAST schema validation error.
  DACSDKMAAdErrorCodeVastInvalidSchema = 101,

/// VASTリクエストが時間内に返らなかった。
  DACSDKMAAdErrorCodeVastWrapperLoadTimeout = 301,

/// Wrapperのリダイレクト回数が上限に達した。
  DACSDKMAAdErrorCodeVastTooManyRedirects = 302,
  DACSDKMAAdErrorCodeVastNoAds = 303,

/// 動画プレーヤーがリニア広告を表示できなかった。
  DACSDKMAAdErrorCodeVideoPlayerError = 400,
  DACSDKMAAdErrorCodeVastMediaFileNotFound = 401,

/// メディアファイルURLにリクエストして、時間内にレスポンスが帰ってこなかった。
  DACSDKMAAdErrorCodeVastMediaLoadTimeout = 402,
  DACSDKMAAdErrorCodeVastLinearAssetMismatch = 403,
  DACSDKMAAdErrorCodeVastNonlinearAdResourceNotFound = 503,

/// コンパニオン広告、コンパニオンリソースの取得に失敗した。
  DACSDKMAAdErrorCodeVastCompanionAdLoadingFailed = 603,
  DACSDKMAAdErrorCodeVastCompanionAdResourceNotFound = 604,

/// VMAP schema error
  DACSDKMAAdErrorCodeVmapInvalidSchema = 1000,

/// VMAP version of response not supported
  DACSDKMAAdErrorCodeVmapVastVersionNotSupported = 1001,

/// VMAP parsing error
  DACSDKMAAdErrorCodeVmapXmlParsingError = 1002,

/// AdBlock type not supported
  DACSDKMAAdErrorCodeVmapAdBlockTypeNotSupported = 1003,

/// General ad response dosument error
  DACSDKMAAdErrorCodeVmapAdError = 1004,

/// Ad response template type not supported
  DACSDKMAAdErrorCodeVmapAdTypeNotSupported = 1005,

/// Ad response document extraction or parsing error
  DACSDKMAAdErrorCodeVmapAdParsingError = 1006,

/// Ad response document retrieval timeout
  DACSDKMAAdErrorCodeVmapAdLoadTimeout = 1007,

/// Ad response document retrieval error(e.g., HTTP server responded with error code)
  DACSDKMAAdErrorCodeVmapAdLoadError = 1008,

/// ネットワークが切断されている。
  DACSDKMAAdErrorCodeNetworkNotReachable = 100000,

/// 無効なパラメータを受け取った。
  DACSDKMAAdErrorCodeInvalidParameter = 100001,

/// データリクエストに失敗した。
  DACSDKMAAdErrorCodeDataRequestFailed = 100002,

/// MediaFileURLが一つも存在しなかった。
  DACSDKMAAdErrorCodeNoMediaFileURL = 100003,

/// iOSのバージョンが古い。
  DACSDKMAAdErrorCodeUnsupportedIOSVersion = 100004,

/// 動画広告枠が存在しない。
  DACSDKMAAdErrorCodeNoAdContainerView = 100005,
};


/// 広告ロード中か再生中に発生したエラーの属性。
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdErrorType) {

/// VASTやクリエイティブのロードに関するエラー。
  DACSDKMAAdErrorTypeLoadingFailed = 0,

/// 広告再生に関するエラー。
  DACSDKMAAdErrorTypePlayingFailed = 1,

/// その他・原因不明のエラー。
  DACSDKMAAdErrorTypeUnknownErrorType = 2,
};

enum DACSDKMAAdEventType : NSInteger;


/// 広告再生に関するイベント
SWIFT_CLASS("_TtC8DACSDKMA15DACSDKMAAdEvent")
@interface DACSDKMAAdEvent : NSObject

/// イベント属性。(readonly)
@property (nonatomic, readonly) enum DACSDKMAAdEventType type;

/// イベント情報。(readonly)
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable adData;

/// イベント名。(readonly)
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@end


/// 広告再生に関するイベント属性
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdEventType) {

/// AdBreakが開始した。
  DACSDKMAAdEventTypeDidAdBreakStart = 0,

/// AdBreakが終了した。
  DACSDKMAAdEventTypeDidAdBreakEnd = 1,

/// 広告データの読み込みが完了した。
  DACSDKMAAdEventTypeDidLoad = 2,

/// 動画広告が再生開始した。
  DACSDKMAAdEventTypeDidStart = 3,

/// 動画広告が"1/4"再生された。
  DACSDKMAAdEventTypeDidFirstQuartile = 4,

/// 動画広告が"1/2"再生された。
  DACSDKMAAdEventTypeDidMidpoint = 5,

/// 動画広告が"3/4"再生された。
  DACSDKMAAdEventTypeDidThirdQuartile = 6,

/// 動画広告が再生完了した。
  DACSDKMAAdEventTypeDidComplete = 7,

/// VMAPも含めて、すべての動画広告が再生完了した。
  DACSDKMAAdEventTypeDidAllAdsComplete = 8,

/// 動画広告が再開した。再生開始時は通知されない。
  DACSDKMAAdEventTypeDidResume = 9,

/// 動画広告が一時停止した。
  DACSDKMAAdEventTypeDidPause = 10,

/// 動画広告が停止した。
  DACSDKMAAdEventTypeDidStop = 11,
  DACSDKMAAdEventTypeWillSkip = 12,
  DACSDKMAAdEventTypeDidSkip = 13,

/// 動画広告がクリックされた。
  DACSDKMAAdEventTypeDidClick = 14,

/// 広告枠が最大化する。
  DACSDKMAAdEventTypeWillEnterFullscreen = 15,

/// 広告枠が最大化した。
  DACSDKMAAdEventTypeDidEnterFullscreen = 16,

/// 最大化した広告枠が元のサイズに戻る。
  DACSDKMAAdEventTypeWillExitFullscreen = 17,

/// 最大化した広告枠が元のサイズに戻った。
  DACSDKMAAdEventTypeDidExitFullscreen = 18,

/// 広告枠が閉じられた
  DACSDKMAAdEventTypeDidClose = 19,

/// 動画広告が静音状態が解除された。
  DACSDKMAAdEventTypeDidUnMute = 20,

/// 動画広告が静音状態になった。
  DACSDKMAAdEventTypeDidMute = 21,

/// コンパニオンが表示された。
  DACSDKMAAdEventTypeDidCompanionCreativeView = 22,

/// コンパニオンがクリックされた。
  DACSDKMAAdEventTypeDidCompanionClick = 23,

/// 動画広告の表示可能状態が変化した。
  DACSDKMAAdEventTypeDidChangePlayableStatus = 24,
};



/// 広告データの読み込に失敗した際、通知されるクラス
SWIFT_CLASS("_TtC8DACSDKMA26DACSDKMAAdLoadingErrorData")
@interface DACSDKMAAdLoadingErrorData : NSObject

/// 広告データ・エラー情報。(readonly)
@property (nonatomic, readonly, strong) DACSDKMAAdError * _Nonnull adError;
@end

enum DACSDKMAInViewStates : NSInteger;


/// 動画広告再生可能状態
SWIFT_CLASS("_TtC8DACSDKMA29DACSDKMAAdVideoPlayableStates")
@interface DACSDKMAAdVideoPlayableStates : NSObject <NSCopying>

/// インビュー状態
@property (nonatomic, readonly) enum DACSDKMAInViewStates inViewStatus;

/// 起動中のアプリ内に存在するか否か。
@property (nonatomic, readonly) BOOL isOnScreen;

/// 他の広告ビューがフルスクリーンになっているか、否か。
@property (nonatomic, readonly) BOOL isOtherViewInFullscreen;

/// 画面内に存在しているか。
@property (nonatomic, readonly) BOOL hasWindow;

/// 再生可能か否かを判定する
///
/// \returns  再生可能な場合はtrue、不可能な場合はfalseを返す。
- (BOOL)isPlayable;
- (BOOL)isEqual:(id _Nullable)object;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 再生状態
typedef SWIFT_ENUM(NSInteger, DACSDKMAAdVideoPlaybackStates) {

/// 再生中
  DACSDKMAAdVideoPlaybackStatesPlaying = 0,

/// 一時停止中
  DACSDKMAAdVideoPlaybackStatesPausing = 1,

/// 停止中
  DACSDKMAAdVideoPlaybackStatesStopped = 2,

/// 不明
  DACSDKMAAdVideoPlaybackStatesUnknown = 3,
};

@class DACSDKMAAdsManager;


/// 広告データの読み込に成功した際、通知されるクラス
SWIFT_CLASS("_TtC8DACSDKMA21DACSDKMAAdsLoadedData")
@interface DACSDKMAAdsLoadedData : NSObject

/// 広告マネージャー。(readonly)
@property (nonatomic, readonly, strong) DACSDKMAAdsManager * _Nonnull adsManager;
@end

@class DACSDKMASettings;
@class DACSDKMAAdsRequest;
@protocol DACSDKMAAdsLoaderDelegate;


/// 広告データを読み込む為のクラス
SWIFT_CLASS("_TtC8DACSDKMA17DACSDKMAAdsLoader")
@interface DACSDKMAAdsLoader : NSObject
@property (nonatomic, weak) id <DACSDKMAAdsLoaderDelegate> _Nullable delegate;

/// 初期化
- (nonnull instancetype)initWithSettings:(DACSDKMASettings * _Nonnull)settings OBJC_DESIGNATED_INITIALIZER;

/// 広告をリクエストする。
- (void)requestAds:(DACSDKMAAdsRequest * _Nonnull)adsRequest;
@end



/// DACSDKMAAdsLoaderのデリゲート
SWIFT_PROTOCOL("_TtP8DACSDKMA25DACSDKMAAdsLoaderDelegate_")
@protocol DACSDKMAAdsLoaderDelegate

/// 広告データの読み込みに成功した
- (void)dacSdkMaAdsLoader:(DACSDKMAAdsLoader * _Nonnull)loader adsLoadedWithData:(DACSDKMAAdsLoadedData * _Nonnull)data;

/// 広告データの読み込みに失敗した
- (void)dacSdkMaAdsLoader:(DACSDKMAAdsLoader * _Nonnull)loader failedWithErrorData:(DACSDKMAAdLoadingErrorData * _Nonnull)adErrorData;
@end

@protocol DACSDKMAAdsManagerDelegate;


/// 広告操作クラス
SWIFT_CLASS("_TtC8DACSDKMA18DACSDKMAAdsManager")
@interface DACSDKMAAdsManager : NSObject

/// デリゲート
@property (nonatomic, weak) id <DACSDKMAAdsManagerDelegate> _Nullable delegate;

/// 広告枠クラス(readonly)
@property (nonatomic, readonly, strong) DACSDKMAAdContainer * _Nonnull adContainer;

/// 動画広告のサイズ。(readonly)
@property (nonatomic, readonly) CGSize videoSize;

/// 動画広告の静音状態(readonly)(KVO可)
@property (nonatomic, readonly) BOOL isMute;

/// 動画広告表の示部分のサイズ(readonly)(KVO可)
@property (nonatomic, readonly) CGRect videoRect;

/// 動画広告の再生可能時間(readonly)
@property (nonatomic, readonly) double durationTime;

/// 動画広告の再生時間(readonly)(KVO可)
@property (nonatomic, readonly) double progressTime;

/// 動画広告の再生位置(0.0〜1.0)(readonly)(KVO可)
@property (nonatomic, readonly) double progress;

/// 動画広告のスキップ可能になるまでの残り時間。Double.NaNの場合はskip不可能。(readonly)(KVO可)
@property (nonatomic, readonly) double skipRemainingTime;

/// 動画広告の表示状態(readonly)(KVO可)
@property (nonatomic, readonly, strong) DACSDKMAAdVideoPlayableStates * _Nonnull playableStatus;

/// 動画広告の再生状態(readonly)(KVO可)
@property (nonatomic, readonly) enum DACSDKMAAdVideoPlaybackStates playbackStatus;

/// フルスクリーンビュー(readonly)(KVO可)
@property (nonatomic, readonly, strong) UIView * _Nullable fullscreenView;

/// フルスクリーン状態(readonly)(KVO可)
@property (nonatomic, readonly) BOOL isFullscreen;

/// 広告イベント(readonly)(KVO可)
@property (nonatomic, readonly, strong) DACSDKMAAdEvent * _Nonnull adEvent;

/// AdBreak内の最後の広告か否か(readonly)
@property (nonatomic, readonly) BOOL isLastAd;

/// 現在表示中、もしくは次に表示される動画広告の残数
@property (nonatomic, readonly) NSInteger totalAdsCount;

/// 現在表示中、もしくは次に表示される動画広告の残数
@property (nonatomic, readonly) NSInteger remainingAdsCount;

/// 現在表示中、もしくは次に表示される動画広告のインデックス
@property (nonatomic, readonly) NSInteger currentAdIndex;
@property (nonatomic, readonly, strong) DACSDKMASettings * _Nonnull settings;

/// 広告データの読み込み
- (void)load;

/// 終了処理
- (void)clean;

/// 動画広告を再開します。
- (void)play;

/// 動画広告を一時停止します。
- (void)pause;

/// 動画広告を停止します。
- (void)stop;

/// 動画広告をリプレイします。
- (void)replay;

/// 動画広告をスキップします。
- (void)skip;

/// 動画広告がスキップ可能か否か。
- (BOOL)skippable;

/// 動画広告をクリックします。
- (void)clickVideo;

/// 動画広告枠のフルスクリーン状態を変更します。
///
/// \param enable trueの場合は最大化、falseの場合は元に戻します。
- (void)fullscreen:(BOOL)enable;

/// 動画の静音状態を変更します。
///
/// \param enable trueの場合は静音、falseの場合は元に戻します。
- (void)mute:(BOOL)enable;

/// AdBreakが再生中の場合、それを停止し、広告枠を閉じ、デリゲートにコンテンツの再開を通知をします。 AdBreakが再生前に呼び出した場合、動画広告の再生はキャンセルされます。コンテンツの再開は通知されません。
- (void)discardAdBreak;
@end



/// 広告操作クラス・デリゲート
SWIFT_PROTOCOL("_TtP8DACSDKMA26DACSDKMAAdsManagerDelegate_")
@protocol DACSDKMAAdsManagerDelegate

/// DACSDKMAAdEventが発生した際に呼ばれます。
- (void)dacSdkAdsManager:(DACSDKMAAdsManager * _Nonnull)adsManager didReceiveAdEvent:(DACSDKMAAdEvent * _Nonnull)adEvent;

/// DACSDKMAAdErrorが発生した際に呼ばれます。
- (void)dacSdkAdsManager:(DACSDKMAAdsManager * _Nonnull)adsManager didReceiveAdError:(DACSDKMAAdError * _Nonnull)adError;

/// 動画広告が再生開始、レジュームした際に呼ばれます。アプリのビデオコンテンツに停止を要求します。
- (void)dacSdkAdsManagerDidRequestContentPause:(DACSDKMAAdsManager * _Nonnull)adsManager;

/// 動画広告が一時停止、正常終了・エラー終了した際に呼ばれます。アプリのビデオコンテンツに再生を要求します。
- (void)dacSdkAdsManagerDidRequestContentResume:(DACSDKMAAdsManager * _Nonnull)adsManager;
@optional

/// 動画広告の表示状態が変化した際に呼ばれます。
- (void)dacSdkMaAdsManager:(DACSDKMAAdsManager * _Nonnull)adsManager didChangeAdVisibleState:(BOOL)state;
@end



/// 広告データの読み込に使用するクラス
SWIFT_CLASS("_TtC8DACSDKMA18DACSDKMAAdsRequest")
@interface DACSDKMAAdsRequest : NSObject

/// 広告コンテナクラス。(readonly)
@property (nonatomic, readonly, strong) DACSDKMAAdContainer * _Nonnull adContainer;

/// 広告リクエストURL。(readonly)
@property (nonatomic, readonly, copy) NSString * _Nonnull adTagURI;

/// VMAP/AdBreak用コンテンツ情報 (readonly)
@property (nonatomic, readonly, strong) id <DACSDKMAContentPlayhead> _Nullable contentPlayhead;

/// 初期化
- (nonnull instancetype)initWithAdTagURI:(NSString * _Nonnull)adTagURI adContainer:(DACSDKMAAdContainer * _Nonnull)adContainer contentPlayhead:(id <DACSDKMAContentPlayhead> _Nullable)contentPlayhead OBJC_DESIGNATED_INITIALIZER;
@end



/// コンパニオン枠クラス
SWIFT_CLASS("_TtC8DACSDKMA21DACSDKMACompanionSlot")
@interface DACSDKMACompanionSlot : NSObject

/// コンパニオンが追加されるビュー
@property (nonatomic, readonly, strong) UIView * _Nonnull slot;

/// 追加するコンパニオンのサイズ。アスペクト比、およびサイズが近いコンパニオンが選択されます。
@property (nonatomic, readonly) CGSize size;

/// コンパニオンビュー。(readonly)
@property (nonatomic, readonly, weak) UIView * _Nullable companion;

/// コンパニオンの大きさ。(readonly)
@property (nonatomic, readonly) CGSize companionSize;
@end



/// 表示状態
typedef SWIFT_ENUM(NSInteger, DACSDKMAInViewStates) {

/// 完全に親ビューの内部にある。
  DACSDKMAInViewStatesIncluded = 0,

/// ビューと親ビューが一部交差する。親ビューの内部にある。
  DACSDKMAInViewStatesIntersectIn = 1,

/// ビューと親ビューが一部交差する。親ビューの外部にある。
  DACSDKMAInViewStatesIntersectOut = 2,

/// 完全に親ビューの外部にある。 もしくは、hidden == true、alpha <= 0.0、superviewやwindowを所持していない。
  DACSDKMAInViewStatesExcluded = 3,

/// 不明
  DACSDKMAInViewStatesUnknown = 4,
};



/// 広告の読み込み設定クラス
SWIFT_CLASS("_TtC8DACSDKMA16DACSDKMASettings")
@interface DACSDKMASettings : NSObject <NSCopying>

/// 動画広告の読み込みが完了次第、自動的に再生開始するか否か。
@property (nonatomic) BOOL autoStart;

/// 次のAdBreakに自動的に遷移するか否か。
@property (nonatomic) BOOL autoAdvanceToNextAdBreak;

/// 動画広告終了時に、広告枠を自動的に非表示にするか否か。
@property (nonatomic) BOOL autoAdHidden;

/// 動画広告起動時のmute設定。
@property (nonatomic) BOOL mute;

/// ラッパー広告などをリダイレクトする際の最大回数
@property (nonatomic) NSUInteger vastMaxRedirects;

/// VASTをリクエストした際のタイムアウト
@property (nonatomic) NSTimeInterval vastResourceTimeOutSeconds;

/// VASTのリクエストを開始してから、すべてのVASTのロードが完了するまでのタイムアウト
@property (nonatomic) NSTimeInterval vastAllResourceTimeOutSeconds;

/// メディアを読み込む際のタイムアウト時間
@property (nonatomic) NSTimeInterval mediaLoadTimeOutSeconds;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAutoStart:(BOOL)autoStart;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
@end

#pragma clang diagnostic pop
